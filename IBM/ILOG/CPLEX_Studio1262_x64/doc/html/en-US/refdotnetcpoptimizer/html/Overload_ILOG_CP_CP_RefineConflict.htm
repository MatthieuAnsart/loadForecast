<html xml:lang="en" lang="en" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:msxsl="urn:schemas-microsoft-com:xslt">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" />
    <META NAME="save" CONTENT="history" />
    <title>RefineConflict Method </title>
    <meta name="Language" content="en-us" />
    <meta name="System.Keywords" content="RefineConflict method" />
    <meta name="System.Keywords" content="CP.RefineConflict method" />
    <meta name="Microsoft.Help.F1" content="ILOG.CP.CP.RefineConflict" />
    <meta name="Microsoft.Help.Id" content="Overload:ILOG.CP.CP.RefineConflict" />
    <meta name="Microsoft.Help.ContentType" content="Reference" />
    <link rel="stylesheet" type="text/css" href="../styles/Presentation.css" />
    <link rel="stylesheet" type="text/css" href="ms-help://Hx/HxRuntime/HxLink.css" />
    <script type="text/javascript" src="../scripts/EventUtilities.js"> </script>
    <script type="text/javascript" src="../scripts/SplitScreen.js"> </script>
    <script type="text/javascript" src="../scripts/Dropdown.js"> </script>
    <script type="text/javascript" src="../scripts/script_manifold.js"> </script>
    <script type="text/javascript" src="../scripts/script_feedBack.js"> </script>
    <script type="text/javascript" src="../scripts/CheckboxMenu.js"> </script>
    <script type="text/javascript" src="../scripts/CommonUtilities.js"> </script>
    <meta name="container" content="ILOG.CP" />
    <meta name="file" content="Overload_ILOG_CP_CP_RefineConflict" />
    <meta name="guid" content="Overload_ILOG_CP_CP_RefineConflict" />
    <xml>
      <MSHelp:Attr Name="AssetID" Value="Overload:ILOG.CP.CP.RefineConflict" />
      <MSHelp:TOCTitle Title="RefineConflict Method " />
      <MSHelp:RLTitle Title="CP.RefineConflict Method  (ILOG.CP)" />
      <MSHelp:Keyword Index="A" Term="Overload:ILOG.CP.CP.RefineConflict" />
      <MSHelp:Keyword Index="A" Term="frlrfILOGCPCPClassRefineConflictTopic" />
      <MSHelp:Keyword Index="K" Term="RefineConflict method" />
      <MSHelp:Keyword Index="K" Term="CP.RefineConflict method" />
      <MSHelp:Keyword Index="F" Term="ILOG.CP.CP.RefineConflict" />
      <MSHelp:Attr Name="DevLang" Value="CSharp" />
      <MSHelp:Attr Name="DevLang" Value="VB" />
      <MSHelp:Attr Name="Locale" Value="en-us" />
      <MSHelp:Attr Name="TopicType" Value="kbSyntax" />
      <MSHelp:Attr Name="TopicType" Value="apiref" />
      <MSHelp:Attr Name="AssemblyVersion" Value="12.6.2.0" />
    </xml>
  </head>
  <body>
    <input type="hidden" id="userDataCache" class="userDataStyle" />
    <input type="hidden" id="hiddenScrollOffset" />
    <img id="collapseImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" alt="Collapse image" title="Collapse image" />
    <img id="expandImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" alt="Expand Image" title="Expand Image" />
    <img id="collapseAllImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" alt="CollapseAll image" />
    <img id="expandAllImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" alt="ExpandAll image" />
    <img id="dropDownImage" style="display:none; height:0; width:0;" src="../icons/dropdown.gif" alt="DropDown image" />
    <img id="dropDownHoverImage" style="display:none; height:0; width:0;" src="../icons/dropdownHover.gif" alt="DropDownHover image" />
    <img id="copyImage" style="display:none; height:0; width:0;" src="../icons/copycode.gif" alt="Copy image" title="Copy image" />
    <img id="copyHoverImage" style="display:none; height:0; width:0;" src="../icons/copycodeHighlight.gif" alt="CopyHover image" title="CopyHover image" />
    <div id="header">
      <table id="bottomTable" cellpadding="0" cellspacing="0">
        <tr id="headerTableRow1">
          <td align="left">
            <span id="runningHeaderText">CP Optimizer .NET Languages API</span>
          </td>
        </tr>
        <tr id="headerTableRow2">
          <td align="left">
            <span id="nsrTitle">CP<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>RefineConflict Method </span>
          </td>
        </tr>
        <tr id="headerTableRow3">
          <td align="left">
            <a href="T_ILOG_CP_CP.htm">CP Class</a> <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a> <span id="headfeedbackarea" class="feedbackhead"><a href="javascript:SubmitFeedback('','CP Optimizer .NET Languages API','','','','%0\dYour%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report,%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed,%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.%0\A%0\d','Customer%20Feedback');"></a></span></td>
        </tr>
      </table>
      <table id="gradientTable">
        <tr>
          <td class="nsrBottom" background="../icons/gradient.gif" />
        </tr>
      </table>
    </div>
    <div id="mainSection">
      <div id="mainBody">
        <div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()" />
        <span style="color: DarkGray"></span>
        <h1 class="heading">Overload List</h1>
        <div id="overloadMembersTableSection" class="section" name="collapseableSection" style="">
          <table id="memberList" class="members" frame="lhs" cellpadding="2">
            <col width="10%" />
            <tr>
              <th class="iconColumn">
               
            </th>
              <th class="nameColumn">Name</th>
              <th class="descriptionColumn">Description</th>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_RefineConflict.htm">RefineConflict<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span><span class="fs">()</span></span></a>
              </td>
              <td>
                <div class="summary">
                  <p>This method identifies a minimal conflict for the infeasibility of the 
             current model. Since the conflict is minimal, removal of any one of these 
             constraints will remove that particular cause for infeasibility. There may 
             be other conflicts in the model; consequently, repair of a given conflict 
             does not guarantee feasibility of the remaining model.</p>
                  <p>If the conflict refiner also works on variable domains 
             (parameter <span class="code">CP.IntParam.ConflictRefinerOnVariables</span> set 
             to <span class="code">CP.ParameterValues.On</span>), it will first identify a minimal conflicting set 
             of constraints. Then, it will refine this conflict further by identifying 
             a minimal subset of variables whose initial domain is responsible for the 
             infeasibility from amongst the decision variables involved in the constraints 
             of the conflict.</p>
                  <p>This method returns a Boolean value reporting whether or not a conflict 
             has been found.</p>
                  <p>When this method returns <span class="code">True</span>, the conflict can be queried with the 
             <span class="code">GetConflict</span> methods. The method <span class="code">WriteConflict</span> can write 
             the elements of the current conflict.</p>
                  <p>For more information on the conflict refiner, see the concept <em>Conflict Refiner</em> 
             in the C++ Reference Manual.</p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_RefineConflict_1.htm">RefineConflict(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IConstraint<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This method identifies a minimal conflict for the infeasibility of a subset 
             of the constraints of the current model. Since the conflict is minimal, removal 
             of any one of these constraints will remove that particular cause for infeasibility. 
             There may be other conflicts in the model; consequently, repair of a given conflict 
             does not guarantee feasibility of the remaining model.</p>
                  <p>The constraints among which to look for a conflict are passed to this method 
             through the argument <span class="code">csts</span>.</p>
                  <p>Constraints may be grouped by <span class="code">IAnd</span>. If any constraint in a group 
             participates in the conflict, the entire group is determined to do so. 
             No further detail about the constraints within that group is returned.</p>
                  <p>Only constraints directly added to the model or a group of such constraints 
             organized by <span class="code">IAnd</span> can be specified in array <span class="code">csts</span>. 
             If a constraint does not appear in this array, the constraint is assumed to be part 
             of the conflict without any analysis and the conflict refiner will never try to remove 
             this constraint in order to produce a smaller conflict.</p>
                  <p>If the conflict refiner also works on variables domains (parameter 
             <span class="code">CP.IntParam.ConflictRefinerOnVariables</span> set to <span class="code">CP.ParameterValues.On</span>), 
             it will first identify a minimal conflicting set of constraints. Then, it will refine 
             this conflict further by identifying a minimal subset of variables whose initial domain is 
             responsible for the infeasibility from amongst the decision variables involved in the 
             constraints of the conflict.</p>
                  <p>This method returns a Boolean value reporting whether or not a conflict 
             has been found.</p>
                  <p>When this method returns <span class="code">True</span>, the conflict can be queried with the 
             <span class="code">GetConflict</span> methods. The method <span class="code">WriteConflict</span> can write 
             the elements of the current conflict.</p>
                  <p>For more information on the conflict refiner, see the concept <em>Conflict Refiner</em> 
             in the C++ Reference Manual.</p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_RefineConflict_2.htm">RefineConflict(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IConstraint<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This method identifies a minimal conflict for the infeasibility of a subset 
             of the constraints of the current model. Since the conflict is minimal, removal 
             of any one of these constraints will remove that particular cause for infeasibility. 
             There may be other conflicts in the model; consequently, repair of a given conflict 
             does not guarantee feasibility of the remaining model.</p>
                  <p>The constraints among which to look for a conflict are passed to this method 
             through the argument <span class="code">csts</span>.</p>
                  <p>Constraints may be grouped by <span class="code">IAnd</span>. If any constraint in a group 
             participates in the conflict, the entire group is determined to do so. 
             No further detail about the constraints within that group is returned.</p>
                  <p>Groups or constraints may be assigned preference. A group or constraint with a 
             higher preference is more likely to be included in the conflict. More formally, if 
             <span class="code">C={c1,...,cn}</span> denotes the set of constraints in <span class="code">csts</span> and 
             each constraint <span class="code">ci</span> is associated a preference <span class="code">p(ci)</span>, 
             the preference of a subset of constraints <span class="code">S</span> of <span class="code">C</span> is defined 
             as <span class="code">p(S)=min{c in S} p(c)</span>. Function <span class="code">refineConflict</span> will 
             return a minimal conflict <span class="code">S</span> of maximal preference <span class="code">p(S)</span>.</p>
                  <p>A negative preference value specifies that the corresponding group or constraint 
             should not be considered in the computation of a conflict. In other words, such groups 
             are not considered part of the model.</p>
                  <p>Groups or constraints with a preference of 0 (zero) are always considered to be part 
             of the conflict. No further checking is performed on such groups or constraints: 
             the conflict refiner will never try to remove any of these constraints in order to 
             produce a smaller conflict.</p>
                  <p>Only constraints directly added to the model or a group of such constraints 
             organized by <span class="code">IAnd</span> can be specified in array <span class="code">csts</span>. 
             If a constraint does not appear in this array, the constraint is assumed to be part 
             of the conflict without any analysis and the conflict refiner will never try to remove 
             this constraint in order to produce a smaller conflict. It will behave as if the constraint 
             was associated a preference of 0 (zero).</p>
                  <p>If the conflict refiner also works on variable domains (parameter 
             <span class="code">CP.IntParam.ConflictRefinerOnVariables</span> set to <span class="code">CP.ParameterValues.On</span>), 
             it will first identify a minimal conflicting set of constraints using the specified preferences.
             Then, it will refine this conflict further by identifying a minimal subset of variables whose 
             initial domain is responsible for the infeasibility from amongst the decision variables 
             involved in the constraints of the conflict.</p>
                  <p>This method returns a Boolean value reporting whether or not a conflict 
             has been found.</p>
                  <p>When this method returns <span class="code">True</span>, the conflict can be queried with the  
             <span class="code">GetConflict</span> methods. The method <span class="code">WriteConflict</span> can write 
             the elements of the current conflict.</p>
                  <p>For more information on the conflict refiner, see the concept <em>Conflict Refiner</em> 
             in the C++ Reference Manual.</p>
                </div>
              </td>
            </tr>
          </table>
        </div>
        <h1 class="heading">See Also</h1>
        <div id="seeAlsoSection" class="section" name="collapseableSection" style="">
          <div class="seeAlsoStyle">
            <a href="T_ILOG_CP_CP.htm">CP Class</a>
          </div>
          <div class="seeAlsoStyle">
            <a href="AllMembers_T_ILOG_CP_CP.htm">CP Members</a>
          </div>
          <div class="seeAlsoStyle">
            <a href="N_ILOG_CP.htm">ILOG.CP Namespace</a>
          </div>
        </div>
      </div>
      <div id="footer">
        <div class="footerLine">
          <img width="100%" height="3px" src="../icons/footer.gif" alt="Footer image" title="Footer image" />
        </div>
        <A NAME="feedback"></A>
        <span id="fb" class="feedbackcss"></span>
        <p />© Copyright IBM Corp. 1987, 2014</div>
    </div>
  </body>
</html>