<html xml:lang="en" lang="en" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:msxsl="urn:schemas-microsoft-com:xslt">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" />
    <META NAME="save" CONTENT="history" />
    <title>CP Members</title>
    <meta name="Language" content="en-us" />
    <meta name="System.Keywords" content="CP class" />
    <meta name="System.Keywords" content="CP class, all members" />
    <meta name="System.Keywords" content="ILOG.CP.CP class" />
    <meta name="Microsoft.Help.Id" content="AllMembers.T:ILOG.CP.CP" />
    <meta name="Microsoft.Help.ContentType" content="Reference" />
    <link rel="stylesheet" type="text/css" href="../styles/Presentation.css" />
    <link rel="stylesheet" type="text/css" href="ms-help://Hx/HxRuntime/HxLink.css" />
    <script type="text/javascript" src="../scripts/EventUtilities.js"> </script>
    <script type="text/javascript" src="../scripts/SplitScreen.js"> </script>
    <script type="text/javascript" src="../scripts/Dropdown.js"> </script>
    <script type="text/javascript" src="../scripts/script_manifold.js"> </script>
    <script type="text/javascript" src="../scripts/script_feedBack.js"> </script>
    <script type="text/javascript" src="../scripts/CheckboxMenu.js"> </script>
    <script type="text/javascript" src="../scripts/CommonUtilities.js"> </script>
    <meta name="container" content="ILOG.CP" />
    <meta name="file" content="AllMembers_T_ILOG_CP_CP" />
    <meta name="guid" content="AllMembers_T_ILOG_CP_CP" />
    <xml>
      <MSHelp:Attr Name="AssetID" Value="AllMembers.T:ILOG.CP.CP" />
      <MSHelp:TOCTitle Title="CP Members" />
      <MSHelp:RLTitle Title="CP Members (ILOG.CP)" />
      <MSHelp:Keyword Index="A" Term="AllMembers.T:ILOG.CP.CP" />
      <MSHelp:Keyword Index="A" Term="frlrfILOGCPCPMembersTopic" />
      <MSHelp:Keyword Index="K" Term="CP class" />
      <MSHelp:Keyword Index="K" Term="CP class, all members" />
      <MSHelp:Keyword Index="K" Term="ILOG.CP.CP class" />
      <MSHelp:Attr Name="HelpPriority" Value="1" />
      <MSHelp:Attr Name="DevLang" Value="CSharp" />
      <MSHelp:Attr Name="DevLang" Value="VB" />
      <MSHelp:Attr Name="Locale" Value="en-us" />
      <MSHelp:Attr Name="TopicType" Value="kbSyntax" />
      <MSHelp:Attr Name="TopicType" Value="apiref" />
      <MSHelp:Attr Name="AssemblyVersion" Value="12.6.2.0" />
    </xml>
  </head>
  <body>
    <input type="hidden" id="userDataCache" class="userDataStyle" />
    <input type="hidden" id="hiddenScrollOffset" />
    <img id="collapseImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" alt="Collapse image" title="Collapse image" />
    <img id="expandImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" alt="Expand Image" title="Expand Image" />
    <img id="collapseAllImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" alt="CollapseAll image" />
    <img id="expandAllImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" alt="ExpandAll image" />
    <img id="dropDownImage" style="display:none; height:0; width:0;" src="../icons/dropdown.gif" alt="DropDown image" />
    <img id="dropDownHoverImage" style="display:none; height:0; width:0;" src="../icons/dropdownHover.gif" alt="DropDownHover image" />
    <img id="copyImage" style="display:none; height:0; width:0;" src="../icons/copycode.gif" alt="Copy image" title="Copy image" />
    <img id="copyHoverImage" style="display:none; height:0; width:0;" src="../icons/copycodeHighlight.gif" alt="CopyHover image" title="CopyHover image" />
    <div id="header">
      <table id="bottomTable" cellpadding="0" cellspacing="0">
        <tr id="headerTableRow1">
          <td align="left">
            <span id="runningHeaderText">CP Optimizer .NET Languages API</span>
          </td>
        </tr>
        <tr id="headerTableRow2">
          <td align="left">
            <span id="nsrTitle">CP Members</span>
          </td>
        </tr>
        <tr id="headerTableRow3">
          <td align="left">
            <a href="T_ILOG_CP_CP.htm">CP Class</a> <a href="#methodTableToggle" onclick="OpenSection(methodTableToggle)">Methods</a> <a href="#fieldTableToggle" onclick="OpenSection(fieldTableToggle)">Fields</a> <a href="#propertyTableToggle" onclick="OpenSection(propertyTableToggle)">Properties</a> <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a> <span id="headfeedbackarea" class="feedbackhead"><a href="javascript:SubmitFeedback('','CP Optimizer .NET Languages API','','','','%0\dYour%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report,%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed,%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.%0\A%0\d','Customer%20Feedback');"></a></span></td>
        </tr>
      </table>
      <table id="gradientTable">
        <tr>
          <td class="nsrBottom" background="../icons/gradient.gif" />
        </tr>
      </table>
    </div>
    <div id="mainSection">
      <div id="mainBody">
        <div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()" />
        <span style="color: DarkGray"></span>
        <p />
        <p>The <a href="T_ILOG_CP_CP.htm">CP</a> type exposes the following members.</p>
        <h1 class="heading">Methods</h1>
        <div id="methodTableSection" class="section" name="collapseableSection" style="">
          <table id="memberList" class="members" frame="lhs" cellpadding="2">
            <col width="10%" />
            <tr>
              <th class="iconColumn">
               
            </th>
              <th class="nameColumn">Name</th>
              <th class="descriptionColumn">Description</th>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AbortSearch.htm">AbortSearch</a>
              </td>
              <td>
                <div class="summary">This methods stops the current search and can be useful for interrupting the 
            CP solver in an iteractive application.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AddTuple.htm">AddTuple</a>
              </td>
              <td>
                <div class="summary">
            This member function adds a tuple represented by the array <span class="code">array</span> to the tuple set <span class="code">ts</span>.
            <p>If you attempt to add an element that is already in the set, that element will <em>not</em> be added again.
            Added elements are copied. Concert Technology will throw an exception if the size of the array is not equal to
            the arity of the invoking set. You may use this member function to add tuples to the set in a model; you may not
            add tuples in this way during a search.</p></div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AllDiff.htm">AllDiff</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns a new constraint stating that the expression elements of <span class="code">exps</span> must take
            different values from each other.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AllMinDistance.htm">AllMinDistance</a>
              </td>
              <td>
                <div class="summary">
                  <p>This method returns a constraint that ensures that the absolute distance between any pair of variables in the
            array <span class="code">vars</span> will be greater than or equal to <span class="code">k</span>.</p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AllowedAssignments.htm">AllowedAssignments(IIntVar, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns a new constraint based on explicitly stating
            the allowed assignments (values) for a single expression.
            The argument <span class="code">values</span> specifies the allowed values of
            the expression <span class="code">exp</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AllowedAssignments_1.htm">AllowedAssignments(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, IIntTupleSet)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns a new constraint based on explicitly stating the allowed assignments
            for a small group of variables. The allowed assignments are the values that satisfy the constraint; 
            the argument <span class="code">table</span> specifies the combinations of allowed values of the variables, 
            <span class="code">exps</span>.  The order of the constrained variables in the array vars is important
            because the same order is respected in the set.  To avoid exceptions, the size of vars must
            be the same as the arity of the set.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Alternative.htm">Alternative(IIntervalVar, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            This method creates an alternative constraint between interval variable <span class="code">a</span> and
            the set of interval variables in the array <span class="code">bs</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Alternative_1.htm">Alternative(IIntervalVar, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            This method creates an alternative constraint between interval variable <span class="code">a</span> and
            the set of interval variables in the array <span class="code">bs</span> with cardinality <span class="code">c</span>.
            If <span class="code">a</span> is present, <span class="code">c</span> intervals in <span class="code">bs</span>
            will be selected by the alternative constraint.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Alternative_3.htm">Alternative(IIntervalVar, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This method creates an alternative constraint between interval variable <span class="code">a</span> and
            the set of interval variables in the array <span class="code">bs</span> with cardinality <span class="code">c</span>.
            If <span class="code">a</span> is present, <span class="code">c</span> intervals in <span class="code">bs</span>
            will be selected by the alternative constraint.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Alternative_5.htm">Alternative(IIntervalVar, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, String)</a>
              </td>
              <td>
                <div class="summary">
            This method creates an alternative constraint between interval variable <span class="code">a</span> and
            the set of interval variables in the array <span class="code">bs</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Alternative_2.htm">Alternative(IIntervalVar, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, IIntExpr, String)</a>
              </td>
              <td>
                <div class="summary">
            This method creates an alternative constraint between interval variable <span class="code">a</span> and
            the set of interval variables in the array <span class="code">bs</span> with cardinality <span class="code">c</span>.
            If <span class="code">a</span> is present, <span class="code">c</span> intervals in <span class="code">bs</span>
            will be selected by the alternative constraint.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Alternative_4.htm">Alternative(IIntervalVar, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, Int32, String)</a>
              </td>
              <td>
                <div class="summary">
            This method creates an alternative constraint between interval variable <span class="code">a</span> and
            the set of interval variables in the array <span class="code">bs</span> with cardinality <span class="code">c</span>.
            If <span class="code">a</span> is present, <span class="code">c</span> intervals in <span class="code">bs</span>
            will be selected by the alternative constraint.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AlwaysConstant.htm">AlwaysConstant(IStateFunction, IIntervalVar)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AlwaysConstant_2.htm">AlwaysConstant(IStateFunction, Int32, Int32)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AlwaysConstant_1.htm">AlwaysConstant(IStateFunction, IIntervalVar, Boolean, Boolean)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AlwaysConstant_3.htm">AlwaysConstant(IStateFunction, Int32, Int32, Boolean, Boolean)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AlwaysEqual.htm">AlwaysEqual(ICumulFunctionExpr, IIntervalVar, Int32)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AlwaysEqual_2.htm">AlwaysEqual(IStateFunction, IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a constraint that ensures that whenever
            interval variable <span class="code">a</span> is present state function
            <span class="code">f</span> is defined everywhere between the start and the end
            of interval variable <span class="code">a</span> and remains equal to value
            <span class="code">v</span> over this interval.</p>
                  <p />
                  <p>Generally speaking, the optional Boolean values
            <span class="code">startAlign</span> and <span class="code">endAlign</span> allow
            synchronizing the start and end of interval variable <span class="code">a</span>
            with the intervals of the state function:</p>
                  <ul>
                    <li>When <span class="code">startAlign</span> is true, it means that whenever
            interval variable <span class="code">a</span> is present, the start of
            <span class="code">a</span> must be the start of an interval of the state
            function. </li>
                    <li>When <span class="code">endAlign</span> is true, it means that whenever
            interval variable <span class="code">a</span> is present, the <span class="code">end</span>
            of <span class="code">a</span> must be the end of an interval of the state
            function. </li>
                  </ul>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AlwaysEqual_1.htm">AlwaysEqual(ICumulFunctionExpr, Int32, Int32, Int32)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AlwaysEqual_4.htm">AlwaysEqual(IStateFunction, Int32, Int32, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a constraint that ensures that state
            function <span class="code">f</span> is defined everywhere on the interval
            <span class="code">[start,end)</span> and remains equal to value <span class="code">v</span>
            over this interval.</p>
                  <p />
                  <p>Generally speaking, the optional Boolean values
            <span class="code">startAlign</span> and <span class="code">endAlign</span> allow
            synchronizing <span class="code">start</span> and <span class="code">end</span>
            with the intervals of the state function:</p>
                  <ul>
                    <li>When <span class="code">startAlign</span> is true, it means that
            <span class="code">start</span> must be the start of an interval of the
            state function. </li>
                    <li>When <span class="code">endAlign</span> is true, it means that
            <span class="code">end</span> must be the end of an interval of the state
            function. </li>
                  </ul>
                  <p>By default, <span class="code">startAlign</span> and <span class="code">endAlign</span> are false.</p>
                  <p>For more information on state functions, see the Concepts
            section of the C++ API Reference Manual.  </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AlwaysEqual_3.htm">AlwaysEqual(IStateFunction, IIntervalVar, Int32, Boolean, Boolean)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a constraint that ensures that whenever
            interval variable <span class="code">a</span> is present state function
            <span class="code">f</span> is defined everywhere between the start and the end
            of interval variable <span class="code">a</span> and remains equal to value
            <span class="code">v</span> over this interval.</p>
                  <p />
                  <p>Generally speaking, the optional Boolean values
            <span class="code">startAlign</span> and <span class="code">endAlign</span> allow
            synchronizing the start and end of interval variable <span class="code">a</span>
            with the intervals of the state function:</p>
                  <ul>
                    <li>When <span class="code">startAlign</span> is true, it means that whenever
            interval variable <span class="code">a</span> is present, the start of
            <span class="code">a</span> must be the start of an interval of the state
            function. </li>
                    <li>When <span class="code">endAlign</span> is true, it means that whenever
            interval variable <span class="code">a</span> is present, the <span class="code">end</span>
            of <span class="code">a</span> must be the end of an interval of the state
            function. </li>
                  </ul>
                  <p />
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AlwaysEqual_5.htm">AlwaysEqual(IStateFunction, Int32, Int32, Int32, Boolean, Boolean)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a constraint that ensures that state
            function <span class="code">f</span> is defined everywhere on the interval
            <span class="code">[start,end)</span> and remains equal to value <span class="code">v</span>
            over this interval.</p>
                  <p />
                  <p>Generally speaking, the optional Boolean values
            <span class="code">startAlign</span> and <span class="code">endAlign</span> allow
            synchronizing <span class="code">start</span> and <span class="code">end</span>
            with the intervals of the state function:</p>
                  <ul>
                    <li>When <span class="code">startAlign</span> is true, it means that
            <span class="code">start</span> must be the start of an interval of the
            state function. </li>
                    <li>When <span class="code">endAlign</span> is true, it means that
            <span class="code">end</span> must be the end of an interval of the state
            function. </li>
                  </ul>
                  <p />
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AlwaysIn.htm">AlwaysIn(ICumulFunctionExpr, IIntervalVar, Int32, Int32)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AlwaysIn_2.htm">AlwaysIn(IStateFunction, IIntervalVar, Int32, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a constraint that ensures that whenever
            interval variable <span class="code">a</span> is present, the value of state
            function <span class="code">f</span>, if defined, remains in the range
            <span class="code">[vmin,vmax]</span> for any point <span class="code">t</span> between the
            start and the end of interval variable <span class="code">a</span>.</p>
                  <p />
                  <p>For more information on state functions, see the Concepts
            section of the C++ API Reference Manual. </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AlwaysIn_1.htm">AlwaysIn(ICumulFunctionExpr, Int32, Int32, Int32, Int32)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AlwaysIn_3.htm">AlwaysIn(IStateFunction, Int32, Int32, Int32, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a constraint that ensures that, if it is
            defined, the value of state function <span class="code">f</span> remains in the
            range <span class="code">[vmin,vmax]</span> for any point <span class="code">t</span> in
            the interval of integers <span class="code">[start,end)</span>.</p>
                  <p />
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AlwaysNoState.htm">AlwaysNoState(IStateFunction, IIntervalVar)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AlwaysNoState_1.htm">AlwaysNoState(IStateFunction, Int32, Int32)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ArrayEltName.htm">ArrayEltName</a>
              </td>
              <td>
                <div class="summary">
            This method is a shortcut to <span class="code">name.concat("[").concat(String.valueOf(index)).concat("]")</span></div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Before.htm">Before</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a constraint that states that whenever
            both interval variables <span class="code">pred</span> and <span class="code">succ</span> are
            present, interval variable <span class="code">pred</span> must be ordered before
            interval variable <span class="code">succ</span> (but not necessarily
            immediately before) in the sequence variable <span class="code">seq</span>.</p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ClearAbort.htm">ClearAbort</a>
              </td>
              <td>
                <div class="summary">This function should be called after <span class="code">AbortSearch</span> before any subsequent
            call to <span class="code">Solve</span> or <span class="code">StartNewSearch</span>.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_clearExplanations.htm">clearExplanations</a>
              </td>
              <td>
                <div class="summary">
            This member function is used to clear the set of failure indices to be explained.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ClearStartingPoint.htm">ClearStartingPoint</a>
              </td>
              <td>
                <div class="summary">
             This member function removes any starting point specified on the
             invoking CP Optimizer engine: subsequent searches will not use
             any starting point information, unless a new starting point is
             set.
            
             For more information on starting points, see the
             <em>Starting Point</em> concept.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Constant.htm">Constant(Double, String)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns a new constant expression equal to <span class="code">value</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Constant_1.htm">Constant(Int32, String)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns a new constant expression equal to <span class="code">value</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Count.htm">Count</a>
              </td>
              <td>
                <div class="summary">
            This function creates a new constrained integer expression equal to the number of variables in
            <span class="code">exprs</span> that are fixed to the value <span class="code">v</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_CountDifferent.htm">CountDifferent</a>
              </td>
              <td>
                <div class="summary">
            This function creates a new constrained integer expression equal to the number of different values assigned to the variables in
            <span class="code">exprs</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_CumulFunctionExpr.htm">CumulFunctionExpr<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span><span class="fs">()</span></span></a>
              </td>
              <td>
                <div class="summary">
            This method creates a constant cumul function expression everywhere equal to <span class="code">0</span>
             that the user can modify subsequently with the operators <span class="code">+=, -=</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_CumulFunctionExpr_1.htm">CumulFunctionExpr(String)</a>
              </td>
              <td>
                <div class="summary">
            This method creates a constant cumul function expression everywhere equal to <span class="code">0</span>
            that the user can modify subsequently with the operators <span class="code">+=, -=</span>.
            You can specify a <span class="code">name</span> of your own choice.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Diff.htm">Diff</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Distribute.htm">Distribute(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns a counting constraint in a model. The constraint has no effect until you add it to the CP
            solver. When the constraint is added, the number of constrained variables in the array <span class="code">cards</span> is
            equal to the number of occurrences in the array <span class="code">vars</span> of the values in an array of consecutive
            integers starting with 0 (zero). For each i, <span class="code">cards[i]</span> is equal to the number of occurrences of i in
            the array <span class="code">vars</span>. After propagation of this constraint, the minimum of <span class="code">cards[i]</span> is at
            least equal to the number of variables contained in <span class="code">vars</span> bound to the value i; and the maximum of
            <span class="code">cards[i]</span> is at most equal to the number of variables contained in <span class="code">vars</span> that contain i
            in their domain.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Distribute_1.htm">Distribute(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns a counting constraint in a model. The constraint has no effect until you add it to the CP
            solver. When the constraint is added, the number of constrained variables in the array <span class="code">cards</span> is
            equal to the number of occurrences in the array <span class="code">vars</span> of the values in the array <span class="code">values</span>.
            More precisely, for each i, <span class="code">cards[i</span>] is equal to the number of occurrences of <span class="code">values[i]</span>
            in the array <span class="code">vars</span>. After propagation of this constraint, the minimum of <span class="code">cards[i]</span> is at
            least equal to the number of variables contained in <span class="code">vars</span> bound to the value at
            <span class="code">values[i]</span>; and the maximum of <span class="code">cards[i]</span> is at most equal to the number of variables in
            <span class="code">vars</span> that contain the value at <span class="code">values[i]</span> in their domain. The arrays <span class="code">cards</span>
            and <span class="code">values</span> must be the same length, otherwise an exception will be thrown.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Div_2.htm">Div(Int32, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the integer division <span class="code">e1 / e2</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Div.htm">Div(IIntExpr, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the integer division <span class="code">e1 / e2</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Div_1.htm">Div(IIntExpr, Int32)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the integer division <span class="code">e1 / e2</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_DomainMax.htm">DomainMax</a>
              </td>
              <td>
                <div class="summary">This function returns a variable evaluator. This evaluator returns the maximum value in the current domain of the variable.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_DomainMin.htm">DomainMin</a>
              </td>
              <td>
                <div class="summary">This function returns a variable evaluator.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_DomainSize.htm">DomainSize</a>
              </td>
              <td>
                <div class="summary">This function returns a variable evaluator. This evaluator returns the number of elements in the current domain of the evaluated variable.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_DumpModel.htm">DumpModel(TextWriter)</a>
              </td>
              <td>
                <div class="summary">
            Dumps the current model and internal data using TextWriter class.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_DumpModel_1.htm">DumpModel(String)</a>
              </td>
              <td>
                <div class="summary">
            Dumps the current model and internal data into a file.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Element_3.htm">Element(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns a new floating-point expression equal to <span class="code">values[index]</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Element_4.htm">Element(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns a new integer expression equal to <span class="code">values[index]</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Element_1.htm">Element(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns a new integer expression equal to <span class="code">exprs[index]</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Element.htm">Element(IIntExpr, IIntExpr, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">var == values[index]</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Element_2.htm">Element(INumExpr, IIntExpr, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">var == values[index]</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_End.htm">End</a>
              </td>
              <td>
                <div class="summary">
            Frees the memory ressources allocated by invoking CP Optimizer
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_EndAtEnd.htm">EndAtEnd(IIntervalVar, IIntervalVar)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">end(b)-end(a)</span>between the
            end of interval <span class="code">a</span> and the end of interval
            <span class="code">b</span> must be equal to <span class="code">0</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.</p>
                  <p />
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_EndAtEnd_1.htm">EndAtEnd(IIntervalVar, IIntervalVar, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">end(b)-end(a)</span>between the
            end of interval <span class="code">a</span> and the end of interval
            <span class="code">b</span> must be equal to <span class="code">z</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.</p>
                  <p />
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_EndAtEnd_2.htm">EndAtEnd(IIntervalVar, IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">end(b)-end(a)</span>between the
            end of interval <span class="code">a</span> and the end of interval
            <span class="code">b</span> must be equal to <span class="code">z</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.</p>
                  <p />
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_EndAtStart.htm">EndAtStart(IIntervalVar, IIntervalVar)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">start(b)-end(a)</span>between the
            end of interval <span class="code">a</span> and the start of interval
            <span class="code">b</span> must be equal to <span class="code">0</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.</p>
                  <p />
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_EndAtStart_1.htm">EndAtStart(IIntervalVar, IIntervalVar, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">start(b)-end(a)</span>between the
            end of interval <span class="code">a</span> and the start of interval
            <span class="code">b</span> must be equal to <span class="code">z</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.</p>
                  <p />
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_EndAtStart_2.htm">EndAtStart(IIntervalVar, IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">start(b)-end(a)</span>between the
            end of interval <span class="code">a</span> and the start of interval
            <span class="code">b</span> must be equal to <span class="code">z</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.</p>
                  <p />
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_EndBeforeEnd.htm">EndBeforeEnd(IIntervalVar, IIntervalVar)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">end(b)-end(a)</span>between the
            end of interval <span class="code">a</span> and the end of interval
            <span class="code">b</span> must be greater than or equal to <span class="code">0</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.</p>
                  <p />
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_EndBeforeEnd_1.htm">EndBeforeEnd(IIntervalVar, IIntervalVar, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">end(b)-end(a)</span>between the
            end of interval <span class="code">a</span> and the end of interval
            <span class="code">b</span> must be greater than or equal to <span class="code">z</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.</p>
                  <p />
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_EndBeforeEnd_2.htm">EndBeforeEnd(IIntervalVar, IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">end(b)-end(a)</span>between the
            end of interval <span class="code">a</span> and the end of interval
            <span class="code">b</span> must be greater than or equal to <span class="code">z</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.</p>
                  <p />
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_EndBeforeStart.htm">EndBeforeStart(IIntervalVar, IIntervalVar)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">start(b)-end(a)</span>between the
            end of interval <span class="code">a</span> and the start of interval
            <span class="code">b</span> must be greater than or equal to <span class="code">0</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.</p>
                  <p />
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_EndBeforeStart_1.htm">EndBeforeStart(IIntervalVar, IIntervalVar, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">start(b)-end(a)</span>between the
            end of interval <span class="code">a</span> and the start of interval
            <span class="code">b</span> must be greater than or equal to <span class="code">z</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.</p>
                  <p />
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_EndBeforeStart_2.htm">EndBeforeStart(IIntervalVar, IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">start(b)-end(a)</span>between the
            end of interval <span class="code">a</span> and the start of interval
            <span class="code">b</span> must be greater than or equal to <span class="code">z</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.</p>
                  <p />
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_EndEval.htm">EndEval(IIntervalVar, INumToNumSegmentFunction)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a numerical expression that represents the
            value of function <span class="code">f</span> evaluated on the end of interval
            variable <span class="code">a</span> whenever the interval variable is
            present. When the interval variable is absent, it returns <span class="code">0</span>.</p>
                  <p>For more information on expressions on interval
            variables, see the Concepts section of the C++ API Reference Manual.  </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_EndEval_1.htm">EndEval(IIntervalVar, INumToNumSegmentFunction, Double)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a numerical expression that represents the
            value of function <span class="code">f</span> evaluated on the end of interval
            variable <span class="code">a</span> whenever the interval variable is
            present. When the interval variable is absent, it returns the
            constant numerical value <span class="code">absVal</span> (by default: 0).</p>
                  <p>For more information on expressions on interval
            variables, see 
            the Concepts section of the C++ API Reference Manual.  </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_EndOf.htm">EndOf(IIntervalVar)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns an integer expression that represents the end
            of interval variable <span class="code">a</span> whenever the interval variable
            is present. When the interval variable is absent, it returns 
            <span class="code">0</span>.</p>
                  <p>For more information on expressions on interval variables,see 
            the Concepts section of the C++ API Reference Manual. </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_EndOf_1.htm">EndOf(IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns an integer expression that represents the end
            of interval variable <span class="code">a</span> whenever the interval variable
            is present. When the interval variable is absent, it returns the
            constant integer value <span class="code">absVal</span> (by default: 0).</p>
                  <p>For more information on expressions on interval variables, see 
            the Concepts section of the C++ API Reference Manual. </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_EndOfNext.htm">EndOfNext(IIntervalSequenceVar, IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns an integer expression that represents the
             end of the interval variable that is next to interval
             <span class="code">a</span> in sequence variable <span class="code">seq</span>. When
             interval <span class="code">a</span> is present and is the last interval of
             sequence <span class="code">seq</span>, it returns the constant integer value
             <span class="code">lastVal</span>. When interval <span class="code">a</span> is absent, it
             returns 0.</p>
                  <p>For more information on interval variable sequencing, see
             the concept <em>Interval variable sequencing</em> in
             the C++ Reference Manual. </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_EndOfNext_1.htm">EndOfNext(IIntervalSequenceVar, IIntervalVar, Int32, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns an integer expression that represents the
             end of the interval variable that is next to interval
             <span class="code">a</span> in sequence variable <span class="code">seq</span>. When
             interval <span class="code">a</span> is present and is the last interval of
             sequence <span class="code">seq</span>, it returns the constant integer value
             <span class="code">lastVal</span>. When interval <span class="code">a</span> is absent, it
             returns the constant integer value <span class="code">absVal</span>.</p>
                  <p>For more information on interval variable sequencing, see
             the concept <em>Interval variable sequencing</em> in
             the C++ Reference Manual. </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_EndOfPrevious.htm">EndOfPrevious(IIntervalSequenceVar, IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns an integer expression that represents the
             end of the interval variable that is previous to interval
             <span class="code">a</span> in sequence variable <span class="code">seq</span>. When
             interval <span class="code">a</span> is present and is the first interval of
             sequence <span class="code">seq</span>, it returns the constant integer value
             <span class="code">firstVal</span>. When interval <span class="code">a</span> is absent, it
             returns 0.</p>
                  <p>For more information on interval variable sequencing, see
             the concept <em>Interval variable sequencing</em> in
             the C++ Reference Manual. </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_EndOfPrevious_1.htm">EndOfPrevious(IIntervalSequenceVar, IIntervalVar, Int32, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns an integer expression that represents the
             end of the interval variable that is previous to interval
             <span class="code">a</span> in sequence variable <span class="code">seq</span>. When
             interval <span class="code">a</span> is present and is the first interval of
             sequence <span class="code">seq</span>, it returns the constant integer value
             <span class="code">firstVal</span>. When interval <span class="code">a</span> is absent, it
             returns the constant integer value <span class="code">absVal</span>.</p>
                  <p>For more information on interval variable sequencing, see
             the concept <em>Interval variable sequencing</em> in
             the C++ Reference Manual. </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_EndSearch.htm">EndSearch</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Eq_2.htm">Eq(Int32, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">v == e</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Eq.htm">Eq(IIntExpr, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">e1 == e2</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Eq_1.htm">Eq(IIntExpr, Int32)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">e == v</span>.
            </div>
              </td>
            </tr>
            <tr data="public;inherited;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <span class="nolink">Equals</span>
              </td>
              <td>
                <div class="summary">Determines whether the specified <span class="nolink">Object</span> is equal to the current <span class="nolink">Object</span>.</div> (Inherited from <span class="nolink">Object</span>.)</td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Equiv.htm">Equiv</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">c1 &lt;=&gt; c2</span>, in which the two constraints c1 and c2 are
            equivalent.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Error.htm">Error</a>
              </td>
              <td>
                <div class="summary">Returns the error output stream of the invoking <span class="code">CP</span> object. This stream is used by <span class="code">CP</span> for printing errors. It can be set with the method <span class="code">CP.SetError</span>.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_explainFailure.htm">explainFailure(Int32)</a>
              </td>
              <td>
                <div class="summary">
            This member function specifies a tag (index) of the failure to explain. Several failures tags can be added.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_explainFailure_1.htm">explainFailure(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            This member function specifies an array of tags (indices) of failures to explain. 
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ExplicitValueEval.htm">ExplicitValueEval(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">This method is a shortcut to <span class="code">explicitValueEval(vals, evaluation, 0)</span>.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ExplicitValueEval_2.htm">ExplicitValueEval(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">This method is a shortcut to <span class="code">explicitValueEval(vals, evaluation, 0)</span>.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ExplicitValueEval_1.htm">ExplicitValueEval(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, Double)</a>
              </td>
              <td>
                <div class="summary">This function returns a value evaluator. The evaluations of elements of <span class="code">vals</span> are explicitly defined in the array of floating-point values <span class="code">evaluation</span>; that is, the evaluation of <span class="code">vals[i]</span> is <span class="code">evaluation[i]</span>. The arrays <span class="code">vals</span> and <span class="code">evaluation</span> must have the same size.  The evaluation of a value that does not appear in <span class="code">vals</span> is given by <span class="code">defaultEval</span>.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ExplicitValueEval_3.htm">ExplicitValueEval(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, Double)</a>
              </td>
              <td>
                <div class="summary">This function returns a value evaluator.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ExplicitVarEval.htm">ExplicitVarEval(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            This method is a shortcut to <span class="code">explicitVarEval(vars, vals, 0)</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ExplicitVarEval_2.htm">ExplicitVarEval(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            This method is a shortcut to <span class="code">explicitVarEval(vars, vals, 0)</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ExplicitVarEval_1.htm">ExplicitVarEval(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, Double)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a variable evaluator. The evaluation of variables from the array <span class="code">vars</span> are
            explicitly defined in the array of floating-point values <span class="code">vals</span>; that is, the evaluation of
            <span class="code">vars[i]</span> is <span class="code">vals[i]</span>.  The arrays <span class="code">vars</span> and <span class="code">vals</span> must have
            the same size. The evaluation of a variable that does not appear in the array is given by
            <span class="code">defaultEval</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ExplicitVarEval_3.htm">ExplicitVarEval(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, Double)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a variable evaluator. The evaluations of variables in the array <span class="code">vars</span> are
            explicitly defined in the array of integer values <span class="code">vals</span>; that is, the evaluation of
            <span class="code">vars[i]</span> is <span class="code">vals[i]</span>.  The arrays <span class="code">vars</span> and <span class="code">vals</span> must have the same size.
            The evaluation of a variable that does not appear in the array is given by <span class="code">defaultEval</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Exponent.htm">Exponent</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new expression <span class="code">exp(e)</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ExportModel.htm">ExportModel(TextWriter)</a>
              </td>
              <td>
                <div class="summary">
             Exports the current model using TextWriter class.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ExportModel_1.htm">ExportModel(String)</a>
              </td>
              <td>
                <div class="summary">
             Exports the current model into a file.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_FalseConstraint.htm">FalseConstraint</a>
              </td>
              <td>
                <div class="summary">Creates and returns a new constraint that is always false.</div>
              </td>
            </tr>
            <tr data="protected;inherited;notNetfw;">
              <td>
                <img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" />
              </td>
              <td>
                <span class="nolink">Finalize</span>
              </td>
              <td>
                <div class="summary">Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</div> (Inherited from <span class="nolink">Object</span>.)</td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_First.htm">First</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a constraint that states that whenever
            interval variable <span class="code">a</span> is present, it must be ordered
            first in the sequence variable <span class="code">seq</span>.</p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Floor.htm">Floor</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns a new expression 
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ForbiddenAssignments.htm">ForbiddenAssignments(IIntVar, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns a new constraint based on explicitly stating
            the forbidden assignments (values) for a single expression.
            The argument <span class="code">values</span> specifies the forbidden values of
            the expression <span class="code">exp</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ForbiddenAssignments_1.htm">ForbiddenAssignments(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, IIntTupleSet)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns a new constraint based on explicitly stating the forbidden assignments
            for a small group of variables. The forbidden assignments are the value combinations that violate
            the constraint; 
            the argument <span class="code">table</span> specifies the combinations of forbidden values of the variables, 
            <span class="code">exps</span>.  The order of the constrained variables in the array vars is important
            because the same order is respected in the set.  To avoid exceptions, the size of vars must
            be the same as the arity of the set.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ForbidEnd.htm">ForbidEnd</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a constraint that states that whenever
            interval variable <span class="code">a</span> is present, it cannot end at a
            value <span class="code">t</span> such that <span class="code">f(t-1)=0</span>. You must add this
            constraint to a model and extract the model for an algorithm in
            order for it to be taken into account.</p>
                  <p />
                  <p>Typically, this constraint can be used in combination with an
            intensity function to state that the interval variable cannot end
            at a point where its intensity function is nul.</p>
                  <p />
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ForbidExtent.htm">ForbidExtent</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a constraint that states that whenever
            interval variable <span class="code">a</span> is present, it cannot contain a
            value <span class="code">t</span> such that <span class="code">f(t)=0</span>. You must add this
            constraint to a model and extract the model for an algorithm in
            order for it to be taken into account.</p>
                  <p />
                  <p>Typically, this constraint can be used in combination with an
            intensity function to state that the interval variable cannot
            overlap intervals where its intensity function is nul.</p>
                  <p />
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ForbidStart.htm">ForbidStart</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a constraint that states that whenever
            interval variable <span class="code">a</span> is present, it cannot start at a
            value <span class="code">t</span> such that <span class="code">f(t)=0</span>. You must add this
            constraint to a model and extract the model for an algorithm in
            order for it to be taken into account.</p>
                  <p />
                  <p>Typically, this constraint can be used in combination with an
            intensity function to state that the interval variable cannot start
            at a point where its intensity function is nul.</p>
                  <p />
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Fract.htm">Fract</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Ge_5.htm">Ge(Int32, ICumulFunctionExpr)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that the value of cumul function expression
            <span class="code">f</span> should never be greater than <span class="code">vmax</span>.
            </div> (Overrides <span class="nolink">IloModelerImplGe(Int32, ICumulFunctionExpr)</span>.)</td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Ge_6.htm">Ge(Int32, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">v &gt;= e</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Ge.htm">Ge(ICumulFunctionExpr, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that the value of cumul function expression
            <span class="code">f</span> should never be less than <span class="code">vmin</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Ge_1.htm">Ge(ICumulFunctionExpr, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that the value of cumul function expression
            <span class="code">f</span> should never be less than <span class="code">vmin</span>.
            </div> (Overrides <span class="nolink">IloModelerImplGe(ICumulFunctionExpr, Int32)</span>.)</td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Ge_2.htm">Ge(IIntExpr, ICumulFunctionExpr)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that the value of cumul function expression
            <span class="code">f</span> should never be greater than <span class="code">vmax</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Ge_3.htm">Ge(IIntExpr, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">e1 &gt;= e2</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Ge_4.htm">Ge(IIntExpr, Int32)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">e &gt;= v</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetAllConstrainedICumulFunctionExprs.htm">GetAllConstrainedICumulFunctionExprs</a>
              </td>
              <td>
                <div class="summary">
             Gets all cumul functions in the current model.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetAllIIntervalSequenceVars.htm">GetAllIIntervalSequenceVars</a>
              </td>
              <td>
                <div class="summary">
             Gets all interval sequence variables in the current model.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetAllIIntervalVars.htm">GetAllIIntervalVars</a>
              </td>
              <td>
                <div class="summary">
             Gets all interval variables in the current model.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetAllIIntVars.htm">GetAllIIntVars</a>
              </td>
              <td>
                <div class="summary">
             Get all integer variables in the current model.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetAllIStateFunctions.htm">GetAllIStateFunctions</a>
              </td>
              <td>
                <div class="summary">
             Gets all state functions in the current model.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetConflict.htm">GetConflict(IConstraint)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns the conflict status for a given constraint <span class="code">cst</span>.</p>
                  <p>The status of each of the constraints that were initially specified as being part of the 
             conflict and that were consequently not refined by the conflict refiner is 
             <span class="code">CP.ConflictStatus.ConflictPossibleMember</span> (constraints not in the array of 
             constraints passed to <span class="code">RefineConflict</span> or constraints or groups with 
             preference 0).</p>
                  <p>For more information on the conflict refiner, see the concept <em>Conflict Refiner</em> 
             in the C++ Reference Manual.</p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetConflict_1.htm">GetConflict(IIntervalVar)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns the conflict status for a given interval 
             variable <span class="code">var</span>.</p>
                  <p>In case the conflict refiner did not operate on variables 
             (parameter <span class="code">CP.IntParam.ConflictRefinerOnVariables</span> not set 
             to <span class="code">CP.ParameterValues.On</span>), this member function returns status 
             <span class="code">CP.ConflictStatus.ConflictPossibleMember</span>.</p>
                  <p>For more information on the conflict refiner, see the concept <em>Conflict Refiner</em> 
             in the C++ Reference Manual.</p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetConflict_2.htm">GetConflict(INumVar)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns the conflict status for a given numerical 
             variable <span class="code">var</span>.</p>
                  <p>In case the conflict refiner did not operate on variables 
             (parameter <span class="code">CP.IntParam.ConflictRefinerOnVariables</span> not set 
             to <span class="code">CP.ParameterValues.On</span>), this member function returns status 
             <span class="code">CP.ConflictStatus.ConflictPossibleMember</span>.</p>
                  <p>For more information on the conflict refiner, see the concept <em>Conflict Refiner</em> 
             in the C++ Reference Manual.</p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetDomain.htm">GetDomain</a>
              </td>
              <td>
                <div class="summary"> This member function returns the current domain of interval variable <span class="code">a</span> as maintained by the
            invoking instance of <span class="code">CP</span>.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetDomainSize.htm">GetDomainSize</a>
              </td>
              <td>
                <div class="summary">
            This member function returns the size of the domain of variable <span class="code">var</span> as maintained in the invoking
            instance of <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>. An assertion is violated if <span class="code">var</span> is not of integral type.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetEnd_1.htm">GetEnd(String)</a>
              </td>
              <td>
                <div class="summary">
             Returns the current end time of the interval variable with the specified name.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetEnd.htm">GetEnd(IIntervalVar)</a>
              </td>
              <td>
                <div class="summary"> This member function returns the current value of the end of interval 
             variable <span class="code">a</span> in the invoking instance of <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>. An assertion 
             is violated if <span class="code">a</span> is not fixed.   </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetEndMax.htm">GetEndMax</a>
              </td>
              <td>
                <div class="summary"> This member function returns the maximum value for the end of interval 
             variable <span class="code">a</span> in the invoking instance of <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>.   </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetEndMin.htm">GetEndMin</a>
              </td>
              <td>
                <div class="summary"> This member function returns the minimum value for the end of interval 
             variable <span class="code">a</span> in the invoking instance of <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>.   </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetFirst.htm">GetFirst</a>
              </td>
              <td>
                <div class="summary">This member function assumes that interval sequence variable <span class="code">seq</span> is fixed.
            It returns the interval variable at the first position in the sequence.</div>
              </td>
            </tr>
            <tr data="public;inherited;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <span class="nolink">GetHashCode</span>
              </td>
              <td>
                <div class="summary">Serves as a hash function for a particular type. </div> (Inherited from <span class="nolink">Object</span>.)</td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetICumulFunctionExpr.htm">GetICumulFunctionExpr</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetIIntervalSequenceVar.htm">GetIIntervalSequenceVar</a>
              </td>
              <td>
                <div class="summary">
             Finds an interval sequence variable in the current model by its name.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetIIntervalVar.htm">GetIIntervalVar</a>
              </td>
              <td>
                <div class="summary">
             Finds an interval variable in the current model by its name.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetIIntVar.htm">GetIIntVar</a>
              </td>
              <td>
                <div class="summary">
             Finds an integer variable in the current model by its name.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetInfo.htm">GetInfo(CP<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>DoubleInfo)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetInfo_1.htm">GetInfo(CP<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>IntInfo)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetIntValue.htm">GetIntValue</a>
              </td>
              <td>
                <div class="summary">
            This member function returns the current value of the variable <span class="code">v</span> in the invoking instance of
            <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>. An assertion is violated if <span class="code">v</span> is not fixed to a value.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetIStateFunction.htm">GetIStateFunction</a>
              </td>
              <td>
                <div class="summary">
             Finds a state function in the current model by its name.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetLast.htm">GetLast</a>
              </td>
              <td>
                <div class="summary">This member function assumes that interval sequence variable <span class="code">seq</span> is fixed.
            It returns the interval variable at the last position in the sequence. </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetLength_1.htm">GetLength(String)</a>
              </td>
              <td>
                <div class="summary">
             Returns the current length of the interval variable with the specified name.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetLength.htm">GetLength(IIntervalVar)</a>
              </td>
              <td>
                <div class="summary">This member function returns the current value of the length of interval variable <span class="code">a</span> in the invoking instance of <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>. An assertion is violated if <span class="code">a</span> is not fixed.   </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetLengthMax.htm">GetLengthMax</a>
              </td>
              <td>
                <div class="summary">This member function returns the maximum value for the length of interval variable <span class="code">a</span> in the invoking instance of <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>.   </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetLengthMin.htm">GetLengthMin</a>
              </td>
              <td>
                <div class="summary">This member function returns the minimum value for the length of interval variable <span class="code">a</span> in the invoking instance of <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>.   </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetMax.htm">GetMax</a>
              </td>
              <td>
                <div class="summary">
            This member function returns the maximum value of the variable <span class="code">v</span> in the invoking instance
            of <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetMin.htm">GetMin</a>
              </td>
              <td>
                <div class="summary">
            This member function returns the minimum value of the variable <span class="code">v</span> in the invoking instance
            of <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetNext.htm">GetNext</a>
              </td>
              <td>
                <div class="summary">This member function assumes that interval sequence variable <span class="code">seq</span> is fixed.
            It returns the interval variable that immediately follows interval <span class="code">a</span> in the sequence. 
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetNumberOfSegments.htm">GetNumberOfSegments(ICumulFunctionExpr)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetNumberOfSegments_1.htm">GetNumberOfSegments(IStateFunction)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetObjValues.htm">GetObjValues</a>
              </td>
              <td>
                <div class="summary">
            This method returns the numeric values of all objectives
            in a multi-objective function associated with the CP engine.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetParameter_2.htm">GetParameter(String)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetParameter.htm">GetParameter(CP<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>DoubleParam)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetParameter_1.htm">GetParameter(CP<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>IntParam)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This method returns the value of the integer parameter <span class="code">param</span> in the invoked <span class="code">CP</span>
            instance.</p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetParameterDefault.htm">GetParameterDefault(CP<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>DoubleParam)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This method returns the default value of the floating-point parameter <span class="code">param</span> in the invoked
            <span class="code">CP</span> instance.</p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetParameterDefault_1.htm">GetParameterDefault(CP<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>IntParam)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This method returns the default value of the integer parameter <span class="code">param</span> in the invoked
            <span class="code">IloCP</span> instance.</p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetPrev.htm">GetPrev</a>
              </td>
              <td>
                <div class="summary">This member function assumes that interval sequence variable <span class="code">seq</span> is fixed.
            It returns the interval variable that immediately precedes interval <span class="code">a</span> in the 
            sequence.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetRandomInt.htm">GetRandomInt</a>
              </td>
              <td>
                <div class="summary">This member function returns a pseudo-randomly generated integer value in the range [0..n).</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetSegmentEnd.htm">GetSegmentEnd(ICumulFunctionExpr, Int32)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetSegmentEnd_1.htm">GetSegmentEnd(IStateFunction, Int32)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetSegmentStart.htm">GetSegmentStart(ICumulFunctionExpr, Int32)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetSegmentStart_1.htm">GetSegmentStart(IStateFunction, Int32)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetSegmentValue.htm">GetSegmentValue(ICumulFunctionExpr, Int32)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetSegmentValue_1.htm">GetSegmentValue(IStateFunction, Int32)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetSize_1.htm">GetSize(String)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetSize.htm">GetSize(IIntervalVar)</a>
              </td>
              <td>
                <div class="summary">This member function returns the current value of the size of interval 
             variable <span class="code">a</span> in the invoking instance of <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>. An assertion 
             is violated if <span class="code">a</span> is not fixed.   </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetSizeMax.htm">GetSizeMax</a>
              </td>
              <td>
                <div class="summary">This member function returns the maximum value for the size of interval 
             variable <span class="code">a</span> in the invoking instance of <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>.   </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetSizeMin.htm">GetSizeMin</a>
              </td>
              <td>
                <div class="summary"> This member function returns the minimum value for the size of interval 
             variable <span class="code">a</span> in the invoking instance of <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>.   </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetStart_1.htm">GetStart(String)</a>
              </td>
              <td>
                <div class="summary">
             Returns the current start time of the interval variable with the specified name.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetStart.htm">GetStart(IIntervalVar)</a>
              </td>
              <td>
                <div class="summary">This member function returns the current value of the start of interval 
             variable <span class="code">a</span> in the invoking instance of <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>. An assertion 
             is violated if <span class="code">a</span> is not fixed.   </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetStartMax.htm">GetStartMax</a>
              </td>
              <td>
                <div class="summary">This member function returns the maximum value for the start of interval 
             variable <span class="code">a</span> in the invoking instance of <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>.   </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetStartMin.htm">GetStartMin</a>
              </td>
              <td>
                <div class="summary">This member function returns the minimum value for the start of interval 
             variable <span class="code">a</span> in the invoking instance of <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>.   </div>
              </td>
            </tr>
            <tr data="public;inherited;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <span class="nolink">GetType</span>
              </td>
              <td>
                <div class="summary">Gets the type of the current instance.</div> (Inherited from <span class="nolink">Object</span>.)</td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetValue_6.htm">GetValue(String)</a>
              </td>
              <td>
                <div class="summary">
             Returns the current value of an integer variable with the specified name.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetValue_1.htm">GetValue(IIntExpr)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetValue_2.htm">GetValue(IIntVar)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetValue_3.htm">GetValue(INumExpr)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetValue_4.htm">GetValue(INumVar)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetValue.htm">GetValue(ICumulFunctionExpr, Int32)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetValue_5.htm">GetValue(IStateFunction, Int32)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetValues.htm">GetValues(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            This method accepts an array of variables <span class="code">vars</span> and puts the corresponding values into the array
            <span class="code">vals</span>; the corresponding values come from the current solution of the invoking algorithm. The array
            <span class="code">vals</span> must be a clean, empty array when you pass it to this member function.
            <p /><p>If there are no values to return for <span class="code">vars</span>, this method throws an exception.</p></div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetValues_1.htm">GetValues(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>INumVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            This method accepts an array of variables <span class="code">vars</span> and puts the corresponding values into the array
            <span class="code">vals</span>; the corresponding values come from the current solution of the invoking algorithm. The array
            <span class="code">vals</span> must be a clean, empty array when you pass it to this member function.
            <p /><p>If there are no values to return for <span class="code">vars</span>, this method throws an exception.</p></div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Gt_2.htm">Gt(Int32, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">v &gt;= e</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Gt.htm">Gt(IIntExpr, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">e1 &gt;= e2</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Gt_1.htm">Gt(IIntExpr, Int32)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">e &gt;= v</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_HasObjective.htm">HasObjective</a>
              </td>
              <td>
                <div class="summary">This member function returns true if and only if the invoking CP solver has extracted a model involving an objective.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_HeightAtEnd.htm">HeightAtEnd(IIntervalVar, ICumulFunctionExpr)</a>
              </td>
              <td>
                <div class="summary">
                  <p>Whenever interval variable <span class="code">a</span> is present, this
            function returns an integer expression that represents the total
            contribution of the end of interval variable <span class="code">a</span> to
            the cumul function expression <span class="code">f</span>.</p>
                  <p />
                  <p>When interval variable <span class="code">a</span> is absent, this function
            returns <span class="code">0</span>.</p>
                  <p />
                  <p>For more information on cumul function expressions, see 
            the Concepts section of the C++ API Reference Manual.  </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_HeightAtEnd_1.htm">HeightAtEnd(IIntervalVar, ICumulFunctionExpr, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>Whenever interval variable <span class="code">a</span> is present, this
            function returns an integer expression that represents the total
            contribution of the end of interval variable <span class="code">a</span> to
            the cumul function expression<span class="code">f</span>.</p>
                  <p />
                  <p>When interval variable <span class="code">a</span> is absent, this function
            returns a constant integer expression equal to <span class="code">absVal</span>
            (by default: 0).</p>
                  <p />
                  <p>For more information on cumul function expressions, see 
            the Concepts section of the C++ API Reference Manual. </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_HeightAtStart.htm">HeightAtStart(IIntervalVar, ICumulFunctionExpr)</a>
              </td>
              <td>
                <div class="summary">
                  <p>Whenever interval variable <span class="code">a</span> is present, this
            function returns an integer expression that represents the total
            contribution of the start of interval variable <span class="code">a</span> to
            the cumul function expression <span class="code">f</span>.</p>
                  <p />
                  <p>When interval variable <span class="code">a</span> is absent, this function
            returns <span class="code">0</span>.</p>
                  <p />
                  <p>For more information on cumul function expressions, see see 
            the Concepts section of the C++ API Reference Manual. </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_HeightAtStart_1.htm">HeightAtStart(IIntervalVar, ICumulFunctionExpr, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>Whenever interval variable <span class="code">a</span> is present, this
            function returns an integer expression that represents the total
            contribution of the start of interval variable <span class="code">a</span> to
            the cumul function expression <span class="code">f</span>.</p>
                  <p />
                  <p>When interval variable <span class="code">a</span> is absent, this function
            returns a constant integer expression equal to <span class="code">absVal</span>
            (by default: 0).</p>
                  <p />
                  <p>For more information on cumul function expressions, see 
            the Concepts section of the C++ API Reference Manual.  </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IfThenElse.htm">IfThenElse</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">(c1 =&gt; c2) &amp;&amp; (! c1 =&gt; c3)</span>, that is, if the
            first constraint is satisfied, it implies the second, and if it is violated, it implies the third.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ImpactOfLastBranch.htm">ImpactOfLastBranch</a>
              </td>
              <td>
                <div class="summary">This function returns a variable evaluator. The evaluation is the domain reduction that the last instantiation made by search has achieved on the evaluated variable. Values returned range from 0 to 1.0. If the value is close to zero then there wasn't much domain reduction on the evaluated variable during the last instantiation. If the value is close to one, the domain was reduced considerably.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Imply.htm">Imply</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code"> c1 =&gt; c2</span>, that is, the first constraint implies the
            other.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ImportModel.htm">ImportModel(Stream)</a>
              </td>
              <td>
                <div class="summary">
             Imports model from a stream.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ImportModel_1.htm">ImportModel(String)</a>
              </td>
              <td>
                <div class="summary">
             Imports model from a file.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IntervalSequenceVar.htm">IntervalSequenceVar(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This method creates an instance of sequence variable on the set of interval variables
            defined by array <span class="code">a</span>. </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IntervalSequenceVar_1.htm">IntervalSequenceVar(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            This method creates an instance of sequence variable on the set of interval variables
            defined by array <span class="code">a</span>. An array of non-negative
            integer <span class="code">types</span> is specified. Arrays <span class="code">a</span> and <span class="code">types</span> must be of the same size and
            interval variable <span class="code">a[i]</span> will have type <span class="code">types[i]</span> in the sequence variable.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IntervalSequenceVar_3.htm">IntervalSequenceVar(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, String)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This method creates an instance of sequence variable on the set of interval variables
            defined by array <span class="code">a</span>. You can specify a <span class="code">name</span> of your own choice.</p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IntervalSequenceVar_2.htm">IntervalSequenceVar(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, String)</a>
              </td>
              <td>
                <div class="summary">
            This method creates an instance of sequence variable on the set of interval variables
            defined by array <span class="code">a</span>. An array of non-negative
            integer <span class="code">types</span> is specified. Arrays <span class="code">a</span> and <span class="code">types</span> must be of the same size and
            interval variable <span class="code">a[i]</span> will have type <span class="code">types[i]</span> in the sequence variable. 
            You can specify a <span class="code">name</span> of your own choice.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IntervalVar.htm">IntervalVar<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span><span class="fs">()</span></span></a>
              </td>
              <td>
                <div class="summary">
                  <p>This method creates an interval variable.  The start, end and size of the new interval variable range from 0 to the constant
            <span class="code">CP.IntervalMax</span>.  If you need an optional interval
            variable, you need to use the member function <span class="code">SetOptional</span>.  As no intensity function is specified,
            the size of the interval variable will be equal to its length. </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IntervalVar_1.htm">IntervalVar(Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This method creates an interval variable.  The start and end of the new interval variable range from 0 to the constant
            <span class="code">CP.IntervalMax</span>.  The size of the new interval variable is fixed and equal to <span class="code">sz</span>. The
            created interval variable is <em>present</em>; if you need an optional interval variable, you need to use the
            member function <span class="code">SetOptional</span>.  As no intensity function is specified, the size of the interval
            variable will be equal to its length. </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IntervalVar_5.htm">IntervalVar(String)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This method creates an interval variable.  The start, end and size of the new interval variable range from 0 to the constant
            <span class="code">CP.IntervalMax</span>.  If you need an optional interval
            variable, you need to use the member function <span class="code">SetOptional</span>.  As no intensity function is specified,
            the size of the interval variable will be equal to its length. </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IntervalVar_2.htm">IntervalVar(Int32, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This method creates an interval variable.  The start and end of the new interval variable range from 0 to the constant
            <span class="code">CP.IntervalMax</span>.  The size of the new interval variable ranges from <span class="code">szmin</span> to
            <span class="code">szmax</span>. By default, the created interval variable is <em>present</em> but it can be made optional by
            passing a true value (<span class="code">True</span>) for <span class="code">opt</span>. As no intensity function is specified,
            the size of the interval variable will be equal to its length.</p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IntervalVar_4.htm">IntervalVar(Int32, String)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This method creates an interval variable.  The start and end of the new interval variable range from 0 to the constant
            <span class="code">CP.IntervalMax</span>.  The size of the new interval variable is fixed and equal to <span class="code">sz</span>. The
            created interval variable is <em>present</em>; if you need an optional interval variable, you need to use the
            member function <span class="code">SetOptional</span>.  As no intensity function is specified, the size of the interval
            variable will be equal to its length. </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IntervalVar_3.htm">IntervalVar(Int32, Int32, Boolean, INumToNumStepFunction, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This method creates an interval variable.  The start and end of the new interval variable range from 0 to the constant
            <span class="code">CP.IntervalMax</span>.  The size of the new interval variable ranges from <span class="code">szmin</span> to
            <span class="code">szmax</span>. By default, the created interval variable is <em>present</em> but it can be made optional by
            passing a true value (<span class="code">True</span>) for <span class="code">opt</span>. The intensity function is 
            <span class="code">intensity</span>. This intensity function is an integer step function expressed as a percentage (and so must
            bounded in the range [0,100]).</p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IntExpr.htm">IntExpr</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns a new IIntExpr from the IConstraint
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IntExprArray.htm">IntExprArray</a>
              </td>
              <td>
                <div class="summary">Creates and returns an array of null expressions.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IntTable.htm">IntTable</a>
              </td>
              <td>
                <div class="summary">Creates and returns a new table <span class="code">table</span>.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IntValueChooser.htm">IntValueChooser(IValueSelector)</a>
              </td>
              <td>
                <div class="summary">
            This method returns an IIntValueChooser made with the IValueSelector arg.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IntValueChooser_1.htm">IntValueChooser(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IValueSelector<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            This method returns an IIntValueChooser made with the array of IValueSelector arg.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IntVar.htm">IntVar(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">Creates and returns a new integer variable with a domain of possible values.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IntVar_1.htm">IntVar(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, String)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns a new integer variable with a domain of possible values and a name.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IntVarChooser.htm">IntVarChooser(IVarSelector)</a>
              </td>
              <td>
                <div class="summary">
            This method returns an IIntVarChooser made with the IVarSelector arg.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IntVarChooser_1.htm">IntVarChooser(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IVarSelector<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            This method returns an IIntVarChooser made with the array of IVarSelector arg.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Inverse.htm">Inverse</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns an inverse constraint. In formal terms, if the length of the arrays
            <span class="code">f</span> and <span class="code">invf</span> is <span class="code">n</span>, then the
            inverse constraint guarantees that:
            <p /><ul><li> for all <span class="code">i</span> in the interval <span class="code">[0, n-1]</span>, 
            <span class="code">invf[f[i]]==i</span>;</li><p /><li> for all <span class="code">j</span> in the interval <span class="code">[0, n-1]</span>, 
            <span class="code">f[invf[j]]==j</span>.</li></ul></div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IsAbsent_1.htm">IsAbsent(String)</a>
              </td>
              <td>
                <div class="summary">
             Checks whether an interval variable with the specified name is currently set to be absent.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IsAbsent.htm">IsAbsent(IIntervalVar)</a>
              </td>
              <td>
                <div class="summary">This member function returns true if and only if interval variable 
             <span class="code">a</span> is absent in the invoking instance of <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>.   </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IsFixed.htm">IsFixed(ICumulFunctionExpr)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IsFixed_1.htm">IsFixed(IIntervalSequenceVar)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IsFixed_2.htm">IsFixed(IIntervalVar)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IsFixed_3.htm">IsFixed(INumVar)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IsFixed_4.htm">IsFixed(IStateFunction)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IsInDomain.htm">IsInDomain</a>
              </td>
              <td>
                <div class="summary">
            This member function indicates whether <span class="code">value</span> is contained in the current domain of
            <span class="code">var</span> as maintained by the invoking <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span> instance. An assertion is violated if
            <span class="code">var</span> is not of integral type.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Isomorphism.htm">Isomorphism(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            This method creates an isomorphism constraint between the set of interval variables in 
            the array <span class="code">domain</span> and the set of interval variables in the array <span class="code">intervals</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Isomorphism_3.htm">Isomorphism(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, String)</a>
              </td>
              <td>
                <div class="summary">
            This method creates an isomorphism constraint between the set of interval variables in 
            the array <span class="code">domain</span> and the set of interval variables in the array <span class="code">intervals</span>. 
            The set of integer expressions in the array <span class="code">map</span> is the indexer from <span class="code">intervals</span>
            to <span class="code">domain</span> with the default index value for absent intervals <span class="code">absVal</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Isomorphism_1.htm">Isomorphism(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This method creates an isomorphism constraint between the set of interval variables in 
            the array <span class="code">domain</span> and the set of interval variables in the array <span class="code">intervals</span>. 
            The set of integer expressions in the array <span class="code">map</span> is the indexer from <span class="code">intervals</span>
            to <span class="code">domain</span> with the default index value for absent intervals <span class="code">absVal</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Isomorphism_2.htm">Isomorphism(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, Int32, String)</a>
              </td>
              <td>
                <div class="summary">
            This method creates an isomorphism constraint between the set of interval variables in 
            the array <span class="code">domain</span> and the set of interval variables in the array <span class="code">intervals</span>. 
            The set of integer expressions in the array <span class="code">map</span> is the indexer from <span class="code">intervals</span>
            to <span class="code">domain</span> with the default index value for absent intervals <span class="code">absVal</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IsPresent_1.htm">IsPresent(String)</a>
              </td>
              <td>
                <div class="summary">
             Checks whether an interval variable with the specified name is currently set to be present.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IsPresent.htm">IsPresent(IIntervalVar)</a>
              </td>
              <td>
                <div class="summary">This member function returns true if and only if interval variable 
             <span class="code">a</span> is present in the invoking instance of <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>.   </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Last.htm">Last</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a constraint that states that whenever
            interval variable <span class="code">a</span> is present, it must be ordered
            last in the sequence variable <span class="code">seq</span>.</p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Le_5.htm">Le(Int32, ICumulFunctionExpr)</a>
              </td>
              <td>
                <div class="summary">
             This function returns a constraint that states that the value of cumul function expression
            <span class="code">f</span> should never be less than than <span class="code">vmin</span>.
            </div> (Overrides <span class="nolink">IloModelerImplLe(Int32, ICumulFunctionExpr)</span>.)</td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Le_6.htm">Le(Int32, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">v &lt;= e</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Le.htm">Le(ICumulFunctionExpr, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that the value of cumul function expression
            <span class="code">f</span> should never be greater than <span class="code">vmax</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Le_1.htm">Le(ICumulFunctionExpr, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that the value of cumul function expression
            <span class="code">f</span> should never be greater than <span class="code">vmax</span>.
            </div> (Overrides <span class="nolink">IloModelerImplLe(ICumulFunctionExpr, Int32)</span>.)</td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Le_2.htm">Le(IIntExpr, ICumulFunctionExpr)</a>
              </td>
              <td>
                <div class="summary">
             This function returns a constraint that states that the value of cumul function expression
            <span class="code">f</span> should never be less than than <span class="code">vmin</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Le_3.htm">Le(IIntExpr, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">e1 &lt;= e2</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Le_4.htm">Le(IIntExpr, Int32)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">e &lt;= v</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_LengthEval.htm">LengthEval(IIntervalVar, INumToNumSegmentFunction)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a numerical expression that represents the
            value of function <span class="code">f</span> evaluated on the length of interval
            variable <span class="code">a</span> whenever the interval variable is
            present. When the interval variable is absent, it returns <span class="code">0</span></p>
                  <p>For more information on expressions on interval
            variables, see 
            the Concepts section of the C++ API Reference Manual.  </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_LengthEval_1.htm">LengthEval(IIntervalVar, INumToNumSegmentFunction, Double)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a numerical expression that represents the
            value of function <span class="code">f</span> evaluated on the length of interval
            variable <span class="code">a</span> whenever the interval variable is
            present. When the interval variable is absent, it returns the
            constant numerical value <span class="code">absVal</span> (by default: 0).</p>
                  <p>For more information on expressions on interval
            variables, see 
            the Concepts section of the C++ API Reference Manual.  </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_LengthOf.htm">LengthOf(IIntervalVar)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns an integer expression that represents the
            length of interval variable <span class="code">a</span> whenever the interval
            variable is present. When the interval variable is absent, it
            returns <span class="code">0</span>.</p>
                  <p>For more information on expressions on interval variables, see 
            the Concepts section of the C++ API Reference Manual.  </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_LengthOf_1.htm">LengthOf(IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns an integer expression that represents the
            length of interval variable <span class="code">a</span> whenever the interval
            variable is present. When the interval variable is absent, it
            returns the constant integer value <span class="code">absVal</span> (by default:
            0).</p>
                  <p>For more information on expressions on interval variables, see 
            the Concepts section of the C++ API Reference Manual.  </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_LengthOfNext.htm">LengthOfNext(IIntervalSequenceVar, IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns an integer expression that represents the
             length of the interval variable that is next to interval
             <span class="code">a</span> in sequence variable <span class="code">seq</span>. When
             interval <span class="code">a</span> is present and is the last interval of
             sequence <span class="code">seq</span>, it returns the constant integer value
             <span class="code">lastVal</span>. When interval <span class="code">a</span> is absent, it
             returns 0.</p>
                  <p>For more information on interval variable sequencing, see
             the concept <em>Interval variable sequencing</em> in
             the C++ Reference Manual. </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_LengthOfNext_1.htm">LengthOfNext(IIntervalSequenceVar, IIntervalVar, Int32, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns an integer expression that represents the
             length of the interval variable that is next to interval
             <span class="code">a</span> in sequence variable <span class="code">seq</span>. When
             interval <span class="code">a</span> is present and is the last interval of
             sequence <span class="code">seq</span>, it returns the constant integer value
             <span class="code">lastVal</span>. When interval <span class="code">a</span> is absent, it
             returns the constant integer value <span class="code">absVal</span>.</p>
                  <p>For more information on interval variable sequencing, see
             the concept <em>Interval variable sequencing</em> in
             the C++ Reference Manual. </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_LengthOfPrevious.htm">LengthOfPrevious(IIntervalSequenceVar, IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns an integer expression that represents the
             length of the interval variable that is previous to interval
             <span class="code">a</span> in sequence variable <span class="code">seq</span>. When
             interval <span class="code">a</span> is present and is the first interval of
             sequence <span class="code">seq</span>, it returns the constant integer value
             <span class="code">firstVal</span>. When interval <span class="code">a</span> is absent, it
             returns 0.</p>
                  <p>For more information on interval variable sequencing, see
             the concept <em>Interval variable sequencing</em> in
             the C++ Reference Manual. </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_LengthOfPrevious_1.htm">LengthOfPrevious(IIntervalSequenceVar, IIntervalVar, Int32, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns an integer expression that represents the
             length of the interval variable that is previous to interval
             <span class="code">a</span> in sequence variable <span class="code">seq</span>. When
             interval <span class="code">a</span> is present and is the first interval of
             sequence <span class="code">seq</span>, it returns the constant integer value
             <span class="code">firstVal</span>. When interval <span class="code">a</span> is absent, it
             returns the constant integer value <span class="code">absVal</span>.</p>
                  <p>For more information on interval variable sequencing, see
             the concept <em>Interval variable sequencing</em> in
             the C++ Reference Manual. </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Lexicographic.htm">Lexicographic</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns a constraint which maintains two arrays to be lexicographically ordered.
            <p /><p> More specifically, <span class="code">lexicographic(x, y)</span> maintains that <span class="code">x</span> is less than or equal to
            <span class="code">y</span> in the lexicographical sense of the term. This means that either both arrays are equal or that
            there exists <span class="code">i &lt; size(x)</span> such that for all <span class="code">j &lt; i</span>, <span class="code">x[j] = y[j]</span> and
            <span class="code">x[i] &lt; y[i]</span>.</p><p /></div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Log.htm">Log</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new expression <span class="code">log(e)</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Lt_2.htm">Lt(Int32, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">v &lt; e</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Lt.htm">Lt(IIntExpr, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">e1 &lt; e2</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Lt_1.htm">Lt(IIntExpr, Int32)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">e &lt; v</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Max.htm">Max(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new expression <span class="code">max(e)</span>.
            </div> (Overrides <span class="nolink">IloModelerImplMax(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</span>.)</td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Max_1.htm">Max(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>INumExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new expression <span class="code">max(e)</span>.
            </div> (Overrides <span class="nolink">IloModelerImplMax(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>INumExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</span>.)</td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Maximize.htm">Maximize(IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates a maximization objective.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Maximize_1.htm">Maximize(IMultiCriterionExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates a maximization  multi-criteria objective.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Member.htm">Member</a>
              </td>
              <td>
                <div class="summary">
             Creates and returns a constraint stating that the value of the expression <span class="code">exp</span>
             is contained in the array of values <span class="code">values</span>. The use of this function is deprecated 
             since version V12.6.1.
             </div>
              </td>
            </tr>
            <tr data="protected;inherited;notNetfw;">
              <td>
                <img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" />
              </td>
              <td>
                <span class="nolink">MemberwiseClone</span>
              </td>
              <td>
                <div class="summary">Creates a shallow copy of the current <span class="nolink">Object</span>.</div> (Inherited from <span class="nolink">Object</span>.)</td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Min.htm">Min(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new expression <span class="code">min(e)</span>.
            </div> (Overrides <span class="nolink">IloModelerImplMin(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</span>.)</td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Min_1.htm">Min(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>INumExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new expression <span class="code">min(e)</span>.
            </div> (Overrides <span class="nolink">IloModelerImplMin(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>INumExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</span>.)</td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Minimize.htm">Minimize(IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates a minimization objective.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Minimize_1.htm">Minimize(IMultiCriterionExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates a minimization multi-criteria objective.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Model.htm">Model</a>
              </td>
              <td>
                <div class="summary">Creates and returns a new empty model.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Modulo.htm">Modulo</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the modulo expression <span class="code">e % r</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Neq_3.htm">Neq(Int32, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">v != e</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Neq.htm">Neq(IConstraint, IConstraint)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">c1 &lt;=&gt; !c2</span>; that is, the truth values
            of <span class="code">c1</span> and <span class="code">c2</span> should be different.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Neq_1.htm">Neq(IIntExpr, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">e1 != e2</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Neq_2.htm">Neq(IIntExpr, Int32)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">e != v</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Next.htm">Next</a>
              </td>
              <td>
                <div class="summary">This member function searches for a new (or first) solution to the model.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_NoOverlap.htm">NoOverlap(IIntervalSequenceVar)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This constructor creates a no-overlap constraint on the
             sequence variable <span class="code">seq</span>. This constraint states that the
             interval variables of the sequence do not overlap and that the
             order of intervals in the sequence is the order implied by the
             relative position of the start and end points of the
             non-overlapping intervals.</p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_NoOverlap_5.htm">NoOverlap(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This constructor creates a no-overlap constraint on the set of
            interval variables defined by array <span class="code">a</span>.</p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_NoOverlap_1.htm">NoOverlap(IIntervalSequenceVar, ITransitionDistance)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This constructor creates a no-overlap constraint on the
             sequence variable <span class="code">seq</span>. This constraint states that the
             interval variables of the sequence do not overlap and that the
             order of intervals in the sequence is the order implied by the
             relative position of the start and end points of the
             non-overlapping intervals. A transition distance
             <span class="code">tdist</span> is used to specify a minimal distance
             between two interval variables in the sequence. The transition 
             distance holds between an interval and all its successors in the 
             sequence.</p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_NoOverlap_6.htm">NoOverlap(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, String)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This constructor creates a no-overlap constraint on the set of
            interval variables defined by array <span class="code">a</span>. By default, the name of
            the no-overlap constraint is the empty string, but you can specify
            a <span class="code">name</span> of your own choice.</p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_NoOverlap_2.htm">NoOverlap(IIntervalSequenceVar, ITransitionDistance, Boolean)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This constructor creates a no-overlap constraint on the
             sequence variable <span class="code">seq</span>. This constraint states that the
             interval variables of the sequence do not overlap and that the
             order of intervals in the sequence is the order implied by the
             relative position of the start and end points of the
             non-overlapping intervals. A transition distance
             <span class="code">tdist</span> is used to specify a minimal distance
             between two interval variables in the sequence. If <span class="code">direct</span> is
             true, the transition distance holds between an interval and its
             immediate successor in the sequence otherwise, if
             <span class="code">direct</span> is false, the transition distance holds
             between an interval and all its successors in the sequence. </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_NoOverlap_4.htm">NoOverlap(IIntervalSequenceVar, ITransitionDistance, String)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This constructor creates a no-overlap constraint on the
             sequence variable <span class="code">seq</span>. This constraint states that the
             interval variables of the sequence do not overlap and that the
             order of intervals in the sequence is the order implied by the
             relative position of the start and end points of the
             non-overlapping intervals. A transition distance
             <span class="code">tdist</span> is used to specify a minimal distance
             between two interval variables in the sequence.  
             The transition distance holds between an interval and all its 
             successors in the sequence. By default, the
             name of the no-overlap constraint is the empty string, but you
             can specify a <span class="code">name</span> of your own choice.</p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_NoOverlap_3.htm">NoOverlap(IIntervalSequenceVar, ITransitionDistance, Boolean, String)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This constructor creates a no-overlap constraint on the
             sequence variable <span class="code">seq</span>. This constraint states that the
             interval variables of the sequence do not overlap and that the
             order of intervals in the sequence is the order implied by the
             relative position of the start and end points of the
             non-overlapping intervals. A transition distance
             <span class="code">tdist</span> is used to specify a minimal distance
             between two interval variables in the sequence.  If <span class="code">direct</span> is
             true, the transition distance holds between an interval and its
             immediate successor in the sequence otherwise, if
             <span class="code">direct</span> is false, the transition distance holds
             between an interval and all its successors in the sequence. By default, the
             name of the no-overlap constraint is the empty string, but you
             can specify a <span class="code">name</span> of your own choice.</p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_NumExprArray.htm">NumExprArray</a>
              </td>
              <td>
                <div class="summary">Creates and returns an array of null expressions.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_NumToNumSegmentFunction.htm">NumToNumSegmentFunction<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span><span class="fs">()</span></span></a>
              </td>
              <td>
                <div class="summary">
            This constructor creates a piecewise linear function that is constant. It is defined everywhere
            with value <span class="code">0</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_NumToNumSegmentFunction_1.htm">NumToNumSegmentFunction(Double)</a>
              </td>
              <td>
                <div class="summary">
            This constructor creates a piecewise linear function that is constant. It is defined everywhere on the
            interval <span class="code">[xmin,xmax)</span> with the same value <span class="code">dval</span>.
            The use of this function is deprecated since version V12.4.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_NumToNumSegmentFunction_2.htm">NumToNumSegmentFunction(Double, Double)</a>
              </td>
              <td>
                <div class="summary">
            This constructor creates a piecewise linear function that is constant. It is defined everywhere on the
            interval <span class="code">[xmin,xmax)</span> with the same value <span class="code">dval</span>.
            The use of this function is deprecated since version V12.4.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_NumToNumSegmentFunction_5.htm">NumToNumSegmentFunction(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            This constructor creates a piecewise linear function defined everywhere 
            whose segments are defined by the two argument arrays <span class="code">x</span> and <span class="code">v</span>. More
            precisely, the size <span class="code">n</span> of array <span class="code">x</span> must be equal to the size of array <span class="code">v</span>
            and, if the created function is defined on the interval <span class="code">[xmin,xmax)</span>, its values will be:
            <p /><ul><li><span class="code">v[0]</span> for <span class="code">t &lt; x[0]</span>,</li><li><span class="code">v[i] + (t-x[i])*(v[i+1]-v[i])/(x[i+1]-x[i])</span> for <span class="code">t</span> in <span class="code">[x[i], x[i+1])</span> for all
            <span class="code">i</span> in <span class="code">[0, n-2]</span> such that <span class="code">x[i-1] &lt;&gt; x[i]</span>, and </li><li><span class="code">v[n-1]</span> for <span class="code">x[n+1] &lt;= t</span>.</li></ul></div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_NumToNumSegmentFunction_3.htm">NumToNumSegmentFunction(Double, Double, Double)</a>
              </td>
              <td>
                <div class="summary">
            This constructor creates a piecewise linear function that is constant. It is defined everywhere on the
            interval <span class="code">[xmin,xmax)</span> with the same value <span class="code">dval</span>.
            The use of this function is deprecated since version V12.4.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_NumToNumSegmentFunction_6.htm">NumToNumSegmentFunction(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, Double)</a>
              </td>
              <td>
                <div class="summary">
            This constructor creates a piecewise linear function defined everywhere on the interval <span class="code">[xmin,
            xmax)</span> whose segments are defined by the two argument arrays <span class="code">x</span> and <span class="code">v</span>. More
            precisely, the size <span class="code">n</span> of array <span class="code">x</span> must be equal to the size of array <span class="code">v</span>
            and, if the created function is defined on the interval <span class="code">[xmin,xmax)</span>, its values will be:
            <p /><ul><li><span class="code">v[0]</span> on interval <span class="code">[xmin, x[0])</span>,</li><li><span class="code">v[i] +
            (t-x[i])*(v[i+1]-v[i])/(x[i+1]-x[i])</span> for <span class="code">t</span> in <span class="code">[x[i], x[i+1])</span> for all
            <span class="code">i</span> in <span class="code">[0, n-2]</span> such that <span class="code">x[i-1] &lt;&gt; x[i]</span>, and</li><li><span class="code">v[n-1]</span> on interval <span class="code">[x[n-1],xmax)</span>.</li></ul>
            The use of this function is deprecated since version V12.4.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_NumToNumSegmentFunction_4.htm">NumToNumSegmentFunction(Double, Double, Double, String)</a>
              </td>
              <td>
                <div class="summary">
            This constructor creates a piecewise linear function that is constant. It is defined everywhere on the
            interval <span class="code">[xmin,xmax)</span> with the same value <span class="code">dval</span>.
            The use of this function is deprecated since version V12.4.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_NumToNumSegmentFunction_7.htm">NumToNumSegmentFunction(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, Double, Double)</a>
              </td>
              <td>
                <div class="summary">
            This constructor creates a piecewise linear function defined everywhere on the interval <span class="code">[xmin,
            xmax)</span> whose segments are defined by the two argument arrays <span class="code">x</span> and <span class="code">v</span>. More
            precisely, the size <span class="code">n</span> of array <span class="code">x</span> must be equal to the size of array <span class="code">v</span>
            and, if the created function is defined on the interval <span class="code">[xmin,xmax)</span>, its values will be:
            <p /><ul><li><span class="code">v[0]</span> on interval <span class="code">[xmin, x[0])</span>,</li><li><span class="code">v[i] +
            (t-x[i])*(v[i+1]-v[i])/(x[i+1]-x[i])</span> for <span class="code">t</span> in <span class="code">[x[i], x[i+1])</span> for all
            <span class="code">i</span> in <span class="code">[0, n-2]</span> such that <span class="code">x[i-1] &lt;&gt; x[i]</span>, and</li><li><span class="code">v[n-1]</span> on interval <span class="code">[x[n-1],xmax)</span>.</li></ul>
            The use of this function is deprecated since version V12.4.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_NumToNumSegmentFunction_8.htm">NumToNumSegmentFunction(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, Double, Double, String)</a>
              </td>
              <td>
                <div class="summary">
            This constructor creates a piecewise linear function defined everywhere on the interval <span class="code">[xmin,
            xmax)</span> whose segments are defined by the two argument arrays <span class="code">x</span> and <span class="code">v</span>. More
            precisely, the size <span class="code">n</span> of array <span class="code">x</span> must be equal to the size of array <span class="code">v</span>
            and, if the created function is defined on the interval <span class="code">[xmin,xmax)</span>, its values will be:
            <p /><ul><li><span class="code">v[0]</span> on interval <span class="code">[xmin, x[0])</span>,</li><li><span class="code">v[i] +
            (t-x[i])*(v[i+1]-v[i])/(x[i+1]-x[i])</span> for <span class="code">t</span> in <span class="code">[x[i], x[i+1])</span> for all
            <span class="code">i</span> in <span class="code">[0, n-2]</span> such that <span class="code">x[i-1] &lt;&gt; x[i]</span>, and</li><li><span class="code">v[n-1]</span> on interval <span class="code">[x[n-1],xmax)</span>.</li></ul>
            The use of this function is deprecated since version V12.4.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_NumToNumSegmentFunctionCursor.htm">NumToNumSegmentFunctionCursor</a>
              </td>
              <td>
                <div class="summary">
            This constructor creates a cursor to inspect piecewise linear function <span class="code">f</span>. 
            This cursor lets you iterate forward or backward over the steps of the function. 
            The cursor initially specifies the step of the function that contains <span class="code">x</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_NumToNumStepFunction.htm">NumToNumStepFunction<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span><span class="fs">()</span></span></a>
              </td>
              <td>
                <div class="summary">
            This constructor creates a step function defined everywhere with value <span class="code">0</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_NumToNumStepFunction_1.htm">NumToNumStepFunction(Double)</a>
              </td>
              <td>
                <div class="summary">
            This constructor creates a step function defined everywhere on the interval <span class="code">[xmin, xmax)</span> with the
            same value <span class="code">dval</span>.
            The use of this function is deprecated since version V12.4.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_NumToNumStepFunction_2.htm">NumToNumStepFunction(Double, Double)</a>
              </td>
              <td>
                <div class="summary">
            This constructor creates a step function defined everywhere on the interval <span class="code">[xmin, xmax)</span> with the
            same value <span class="code">dval</span>.
            The use of this function is deprecated since version V12.4.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_NumToNumStepFunction_3.htm">NumToNumStepFunction(Double, Double, Double)</a>
              </td>
              <td>
                <div class="summary">
            This constructor creates a step function defined everywhere on the interval <span class="code">[xmin, xmax)</span> with the
            same value <span class="code">dval</span>.
            The use of this function is deprecated since version V12.4.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_NumToNumStepFunction_4.htm">NumToNumStepFunction(Double, Double, Double, String)</a>
              </td>
              <td>
                <div class="summary">
            This constructor creates a step function defined everywhere on the interval <span class="code">[xmin, xmax)</span>
            with the same value <span class="code">dval</span>.
            The use of this function is deprecated since version V12.4.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_NumToNumStepFunctionCursor.htm">NumToNumStepFunctionCursor</a>
              </td>
              <td>
                <div class="summary">
            This constructor creates a cursor to inspect step function <span class="code">f</span>. 
            This cursor lets you iterate forward or backward over the steps of the function. 
            The cursor initially specifies the step of the function that contains <span class="code">x</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Output.htm">Output</a>
              </td>
              <td>
                <div class="summary">Returns the output stream of the invoking <span class="code">CP</span> object. This stream is used by <span class="code">CP</span> for printing logging information.  It can be set with the method <span class="code">CP.SetOut</span>.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_OverlapLength.htm">OverlapLength(IIntervalVar, IIntervalVar)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns an integer expression that represents the
            length of the overlap of interval variable <span class="code">a1</span> and
            interval variable <span class="code">a2</span> whenever interval variables
            <span class="code">a1</span> and <span class="code">a2</span> are present. When interval
            variable <span class="code">a1</span> or <span class="code">a2</span> is absent, the function
            returns zero.</p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_OverlapLength_1.htm">OverlapLength(IIntervalVar, IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns an integer expression that represents the
            length of the overlap of interval variable <span class="code">a1</span> and
            interval variable <span class="code">a2</span> whenever interval variables
            <span class="code">a1</span> and <span class="code">a2</span> are present. When interval
            variable <span class="code">a1</span> or <span class="code">a2</span> is absent, the function
            returns the constant integer value <span class="code">absVal</span>.</p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_OverlapLength_2.htm">OverlapLength(IIntervalVar, Int32, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns an integer expression that represents the
            length of the overlap of interval variable <span class="code">a</span> and
            constant interval <span class="code">[start, end)</span> whenever interval
            variable <span class="code">a</span> is present. When interval variable
            <span class="code">a</span> is absent, the function returns zero.</p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_OverlapLength_3.htm">OverlapLength(IIntervalVar, Int32, Int32, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns an integer expression that represents the
            length of the overlap of interval variable <span class="code">a</span> and
            constant interval <span class="code">[start, end)</span> whenever interval
            variable <span class="code">a</span> is present. When interval variable
            <span class="code">a</span> is absent, the function returns the constant integer
            value <span class="code">absVal</span>.</p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Pack.htm">Pack(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns a pack constraint which maintains the load of a set of containers or bins, given a set of
            weighted items and an assignment of items to containers. <p>Consider that we have <em>n</em> items and <em>m</em>
            containers. Each item <em>i</em> has an integer weight <em>weight[i]</em> and a constrained integer variable
            <em>where[i]</em> associated with it, indicating in which container (numbered contiguously from 0) item
            <em>i</em> is to be placed. No item can be split up, and so an item can go in only one container. Associated with
            each container <em>j</em> is an integer variable <em>load[j]</em> representing the load in that container; that
            is, the sum of the weights of the items which have been assigned to that container. A capacity can be set for
            each container placing an upper bound on this load variable. The constraint also ensures that the total sum of
            the loads of the containers is equal to the sum of the weights of the items being placed.</p></div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Pack_1.htm">Pack(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns a pack constraint which maintains the load of a set of containers or bins, given a set of
            weighted items and an assignment of items to containers. <p>Consider that we have <em>n</em> items and <em>m</em>
            containers. Each item <em>i</em> has an integer weight <em>weight[i]</em> and a constrained integer variable
            <em>where[i]</em> associated with it, indicating in which container (numbered contiguously from 0) item
            <em>i</em> is to be placed. No item can be split up, and so an item can go in only one container. Associated with
            each container <em>j</em> is an integer variable <em>load[j]</em> representing the load in that container; that
            is, the sum of the weights of the items which have been assigned to that container. A capacity can be set for
            each container placing an upper bound on this load variable. The constraint also ensures that the total sum of
            the loads of the containers is equal to the sum of the weights of the items being placed.</p><p>Finally, the
            number, or indeed the set of containers used can be specified by the integer expression <em>used</em>. A
            container is used if at least one item is placed in the container in question.</p></div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_PiecewiseLinear.htm">PiecewiseLinear(INumExpr, Double, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, Double)</a>
              </td>
              <td>
                <div class="summary">
            This function creates an expression to represent a continuous or discontinuous 
            piecewise linear function <em>f</em> of the variable <em>e</em>. 
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_PiecewiseLinear_1.htm">PiecewiseLinear(INumExpr, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, Double, Double)</a>
              </td>
              <td>
                <div class="summary">
             This function creates an expression to represent a continuous or discontinuous 
             piecewise linear function <em>f</em> of the variable <em>e</em>. 
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_PiecewiseLinearFunction.htm">PiecewiseLinearFunction(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, Double, Double)</a>
              </td>
              <td>
                <div class="summary">
            This member function builds an instance of piecewise linear function defined everywhere.
            The array <span class="code">point</span> contains the <em>n</em> breakpoints of the
            function such that <em>point [i-1] &lt;= point [i] for i = 1, . . ., n-1</em>. The array <span class="code">slope</span>
            contains the <em>n+1</em> slopes of the <em>n+1</em> segments of the function. The values <span class="code">a</span> and
            <span class="code">fa</span> must be coordinates of a point such that <span class="code">fa = f(a)</span>.
            <p /><p>When <span class="code">point[i-1] = point[i]</span>, there is a step at the x-coordinate <span class="code">point[i-1]</span> and its
            height is <span class="code">slope[i]</span> to reach the y-coordinate of point[i].</p><p /><p><strong>Example</strong></p><h1 class="heading">Examples</h1><div id="exampleSection" class="section" name="collapseableSection" style=""><span class="code">
            IloPiecewiseLinearFunction(env, IloNumArray(env, 2, 10., 20.),
            IloNumArray(env, 3, 0.3, 1., 2.), 0, 0); 
            </span></div><p>That expression defines a piecewise linear function
            <em>f</em> having two breakpoints at <em>x = 10</em> and <em>x = 20</em>, and three segments; their slopes are
            <em>0.3, 1,</em> and <em>2</em>. The first segment has infinite length and ends at the point <em>(x = 10,  f(x) =
            3)</em> since <em>f(0) = 0</em>. The second segment starts at the point <em>(x = 10, f(x) = 3)</em> and ends at
            the point <em>(x = 20, f(x) = 13)</em>, where the third segment starts. </p></div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_PiecewiseLinearFunction_1.htm">PiecewiseLinearFunction(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, Double, Double, String)</a>
              </td>
              <td>
                <div class="summary">
            This member function builds an instance of piecewise linear function defined everywhere.
            The array <span class="code">point</span> contains the <em>n</em> breakpoints of the
            function such that <em>point [i-1] &lt;= point [i] for i = 1, . . ., n-1</em>. The array <span class="code">slope</span>
            contains the <em>n+1</em> slopes of the <em>n+1</em> segments of the function. The values <span class="code">a</span> and
            <span class="code">fa</span> must be coordinates of a point such that <span class="code">fa = f(a)</span>.
            <p /><p>When <span class="code">point[i-1] = point[i]</span>, there is a step at the x-coordinate <span class="code">point[i-1]</span> and its
            height is <span class="code">slope[i]</span> to reach the y-coordinate of point[i].</p><p /><p><strong>Example</strong></p><h1 class="heading">Examples</h1><div id="exampleSection" class="section" name="collapseableSection" style=""><span class="code">
            IloPiecewiseLinearFunction(env, IloNumArray(env, 2, 10., 20.),
            IloNumArray(env, 3, 0.3, 1., 2.), 0, 0); 
            </span></div><p>That expression defines a piecewise linear function
            <em>f</em> having two breakpoints at <em>x = 10</em> and <em>x = 20</em>, and three segments; their slopes are
            <em>0.3, 1,</em> and <em>2</em>. The first segment has infinite length and ends at the point <em>(x = 10,  f(x) =
            3)</em> since <em>f(0) = 0</em>. The second segment starts at the point <em>(x = 10, f(x) = 3)</em> and ends at
            the point <em>(x = 20, f(x) = 13)</em>, where the third segment starts. </p></div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Power_2.htm">Power(Double, INumExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new expression <span class="code">e1 ^ e2</span>c&gt;.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Power.htm">Power(INumExpr, INumExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new expression <span class="code">e1 ^ e2</span>c&gt;.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Power_1.htm">Power(INumExpr, Int32)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new expression <span class="code">e1 ^ e2</span>c&gt;.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_PresenceOf.htm">PresenceOf</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a constraint that states that interval
            variable <span class="code">a</span> is present. You must add this constraint
            to a model and extract the model for an algorithm in order for it
            to be taken into account.</p>
                  <p />
                  <p>Typically, this constraint is used in combination with other
            constraints. For instance, the following code adds a constraint to
            the model specifying that at least one interval variable among
            <span class="code">a</span> and <span class="code">b</span> should be present:
            <span class="code">model.add(IloPresenceOf(env,a)||IloPresenceOf(env,b));</span></p>
                  <p />
                  <p>For more information on interval variables, see the Concepts
            section of the C++ API Reference Manual.  </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Previous.htm">Previous</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a constraint that states that whenever
            both interval variables <span class="code">prev</span> and <span class="code">next</span> are
            present, interval variable <span class="code">prev</span> must be ordered
            immediately before interval variable <span class="code">next</span> in the
            sequence variable <span class="code">seq</span>.</p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_PrintInformation.htm">PrintInformation<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span><span class="fs">()</span></span></a>
              </td>
              <td>
                <div class="summary">
            This member displays statistics about the CP optimizer. Specifically, in the CP optimizer's output stream, this
            member function displays the following information: <p>The number of branches (decisions taken) in the last
            solve. </p><p>The number of fails in the last solve. </p><p>The number of choice points created in the last
            solve. </p><p>The number of variables in the CP optimizer engine, with a breakdown of the number extracted from
            the model and the number of additional variables added by the CP optimizer for its internal workings. </p><p>The
            number of constraints in the CP optimizer engine. </p><p>The total memory usage of the current solver including a
            breakdown into the memory used by the CP optimizer and that used by the Concert environmnet with which this CP
            optimizer was built. </p><p>The time spent in the last solve (including <span class="code">startNewSearch</span>/<span class="code">next</span>).
            A breakdown is given for the CP Optimizer engine itself and the time to extract the model from Concert.
            </p><p>The total time spent in the CP optimizer since its creation. </p> Each of those numbers can be accessed
            individually via <span class="code">GetInfo</span>. Typical output from the member function
            <span class="code">printInformation</span> looks like this:
            <pre>
            Number of branches : 23355
            Number of fails : 7228
            Number of choice points : 12624
            Number of variables : 11856 (1408 model + 10448 additional)
            Number of constraints : 15873
            Total memory usage : 10.6 Mb (9.3 Mb CP + 1.3 Mb Concert)
            Time in last solve : 12.02 (11.97 engine + 0.05 extraction)
            Total time spent in CP : 12.02
            </pre></div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_PrintInformation_1.htm">PrintInformation(TextWriter)</a>
              </td>
              <td>
                <div class="summary">
            This member function displays statistics about the current state of the CP optimizer since the last call to
            <span class="code">solve</span> or <span class="code">startNewSearch</span> and prints to stream <span class="code">s</span>. For more information,
            see <span class="code">CP.PrintInformation()</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Prod_4.htm">Prod(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>INumExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            Returns an expression equal to the scalar product of <span class="code">values</span> and <span class="code">exps</span>, that is,
            <span class="code">values0*exps0 + values1*exps1 + ...</span></div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Prod_5.htm">Prod(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            Returns an expression equal to the scalar product of <span class="code">values</span> and <span class="code">exps</span>; that is,
            <span class="code">values0*exps0 + values1*exps1 + ...</span></div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Prod.htm">Prod(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            Returns an expression equal to the scalar product of <span class="code">values</span> and <span class="code">exps</span>, that is,
            <span class="code">exps10*exps20 + exps11*exps21 + ...</span></div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Prod_1.htm">Prod(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            Returns an expression equal to the scalar product of <span class="code">values</span> and <span class="code">exps</span>, that is,
            <span class="code">values0*exps0 + values1*exps1 + ...</span></div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Prod_2.htm">Prod(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>INumExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>INumExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            Returns an expression equal to the scalar product of <span class="code">values</span> and <span class="code">exps</span>, that is,
            <span class="code">exps10*exps20 + exps11*exps21 + ...</span></div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Prod_3.htm">Prod(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>INumExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            Returns an expression equal to the scalar product of <span class="code">values</span> and <span class="code">exps</span>, that is,
            <span class="code">values0*exps0 + values1*exps1 + ...</span></div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Propagate.htm">Propagate<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span><span class="fs">()</span></span></a>
              </td>
              <td>
                <div class="summary">Propagates all constraints without a goal.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Propagate_1.htm">Propagate(IConstraint)</a>
              </td>
              <td>
                <div class="summary">
            Propagates a constraint
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Pulse.htm">Pulse(IIntervalVar, Int32)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Pulse_2.htm">Pulse(Int32, Int32, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns an elementary cumul function expression
            that is constant over a certain interval and null before that</p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Pulse_1.htm">Pulse(IIntervalVar, Int32, Int32)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Quot_2.htm">Quot(Double, INumExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new expression <span class="code">e1 / e2</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Quot.htm">Quot(INumExpr, INumExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new expression <span class="code">e1 / e2</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Quot_1.htm">Quot(INumExpr, Double)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new expression <span class="code">e1 / e2</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Range.htm">Range</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns an <span class="code">IRange</span> object. The new <span class="code">IRange</span> object is initialized to
            represent the constraint <span class="code">-b &lt;= expr &lt;= +b</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_RefineConflict.htm">RefineConflict<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span><span class="fs">()</span></span></a>
              </td>
              <td>
                <div class="summary">
                  <p>This method identifies a minimal conflict for the infeasibility of the 
             current model. Since the conflict is minimal, removal of any one of these 
             constraints will remove that particular cause for infeasibility. There may 
             be other conflicts in the model; consequently, repair of a given conflict 
             does not guarantee feasibility of the remaining model.</p>
                  <p>If the conflict refiner also works on variable domains 
             (parameter <span class="code">CP.IntParam.ConflictRefinerOnVariables</span> set 
             to <span class="code">CP.ParameterValues.On</span>), it will first identify a minimal conflicting set 
             of constraints. Then, it will refine this conflict further by identifying 
             a minimal subset of variables whose initial domain is responsible for the 
             infeasibility from amongst the decision variables involved in the constraints 
             of the conflict.</p>
                  <p>This method returns a Boolean value reporting whether or not a conflict 
             has been found.</p>
                  <p>When this method returns <span class="code">True</span>, the conflict can be queried with the 
             <span class="code">GetConflict</span> methods. The method <span class="code">WriteConflict</span> can write 
             the elements of the current conflict.</p>
                  <p>For more information on the conflict refiner, see the concept <em>Conflict Refiner</em> 
             in the C++ Reference Manual.</p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_RefineConflict_1.htm">RefineConflict(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IConstraint<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This method identifies a minimal conflict for the infeasibility of a subset 
             of the constraints of the current model. Since the conflict is minimal, removal 
             of any one of these constraints will remove that particular cause for infeasibility. 
             There may be other conflicts in the model; consequently, repair of a given conflict 
             does not guarantee feasibility of the remaining model.</p>
                  <p>The constraints among which to look for a conflict are passed to this method 
             through the argument <span class="code">csts</span>.</p>
                  <p>Constraints may be grouped by <span class="code">IAnd</span>. If any constraint in a group 
             participates in the conflict, the entire group is determined to do so. 
             No further detail about the constraints within that group is returned.</p>
                  <p>Only constraints directly added to the model or a group of such constraints 
             organized by <span class="code">IAnd</span> can be specified in array <span class="code">csts</span>. 
             If a constraint does not appear in this array, the constraint is assumed to be part 
             of the conflict without any analysis and the conflict refiner will never try to remove 
             this constraint in order to produce a smaller conflict.</p>
                  <p>If the conflict refiner also works on variables domains (parameter 
             <span class="code">CP.IntParam.ConflictRefinerOnVariables</span> set to <span class="code">CP.ParameterValues.On</span>), 
             it will first identify a minimal conflicting set of constraints. Then, it will refine 
             this conflict further by identifying a minimal subset of variables whose initial domain is 
             responsible for the infeasibility from amongst the decision variables involved in the 
             constraints of the conflict.</p>
                  <p>This method returns a Boolean value reporting whether or not a conflict 
             has been found.</p>
                  <p>When this method returns <span class="code">True</span>, the conflict can be queried with the 
             <span class="code">GetConflict</span> methods. The method <span class="code">WriteConflict</span> can write 
             the elements of the current conflict.</p>
                  <p>For more information on the conflict refiner, see the concept <em>Conflict Refiner</em> 
             in the C++ Reference Manual.</p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_RefineConflict_2.htm">RefineConflict(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IConstraint<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This method identifies a minimal conflict for the infeasibility of a subset 
             of the constraints of the current model. Since the conflict is minimal, removal 
             of any one of these constraints will remove that particular cause for infeasibility. 
             There may be other conflicts in the model; consequently, repair of a given conflict 
             does not guarantee feasibility of the remaining model.</p>
                  <p>The constraints among which to look for a conflict are passed to this method 
             through the argument <span class="code">csts</span>.</p>
                  <p>Constraints may be grouped by <span class="code">IAnd</span>. If any constraint in a group 
             participates in the conflict, the entire group is determined to do so. 
             No further detail about the constraints within that group is returned.</p>
                  <p>Groups or constraints may be assigned preference. A group or constraint with a 
             higher preference is more likely to be included in the conflict. More formally, if 
             <span class="code">C={c1,...,cn}</span> denotes the set of constraints in <span class="code">csts</span> and 
             each constraint <span class="code">ci</span> is associated a preference <span class="code">p(ci)</span>, 
             the preference of a subset of constraints <span class="code">S</span> of <span class="code">C</span> is defined 
             as <span class="code">p(S)=min{c in S} p(c)</span>. Function <span class="code">refineConflict</span> will 
             return a minimal conflict <span class="code">S</span> of maximal preference <span class="code">p(S)</span>.</p>
                  <p>A negative preference value specifies that the corresponding group or constraint 
             should not be considered in the computation of a conflict. In other words, such groups 
             are not considered part of the model.</p>
                  <p>Groups or constraints with a preference of 0 (zero) are always considered to be part 
             of the conflict. No further checking is performed on such groups or constraints: 
             the conflict refiner will never try to remove any of these constraints in order to 
             produce a smaller conflict.</p>
                  <p>Only constraints directly added to the model or a group of such constraints 
             organized by <span class="code">IAnd</span> can be specified in array <span class="code">csts</span>. 
             If a constraint does not appear in this array, the constraint is assumed to be part 
             of the conflict without any analysis and the conflict refiner will never try to remove 
             this constraint in order to produce a smaller conflict. It will behave as if the constraint 
             was associated a preference of 0 (zero).</p>
                  <p>If the conflict refiner also works on variable domains (parameter 
             <span class="code">CP.IntParam.ConflictRefinerOnVariables</span> set to <span class="code">CP.ParameterValues.On</span>), 
             it will first identify a minimal conflicting set of constraints using the specified preferences.
             Then, it will refine this conflict further by identifying a minimal subset of variables whose 
             initial domain is responsible for the infeasibility from amongst the decision variables 
             involved in the constraints of the conflict.</p>
                  <p>This method returns a Boolean value reporting whether or not a conflict 
             has been found.</p>
                  <p>When this method returns <span class="code">True</span>, the conflict can be queried with the  
             <span class="code">GetConflict</span> methods. The method <span class="code">WriteConflict</span> can write 
             the elements of the current conflict.</p>
                  <p>For more information on the conflict refiner, see the concept <em>Conflict Refiner</em> 
             in the C++ Reference Manual.</p>
                </div>
              </td>
            </tr>
            <tr data="public;static;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
                <img src="../icons/static.gif" alt="Static member" title="Static member" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_RegisterLicense.htm">RegisterLicense</a>
              </td>
              <td>
                <div class="summary">
            This function has no effect, but it is provided for compatibility with older versions.  The use of this function is deprecated.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Restore.htm">Restore</a>
              </td>
              <td>
                <div class="summary">
            This member function uses the invoking CP optimizer to instantiate the variables in <span class="code">solution</span> with
            their saved values. The value of any objective added to the solution is not restored. If the solution does not
            violate any constraints of the model extracted by the invoking CP optimizer, then <span class="code">IloTrue</span> is
            returned and the state of the constraint variables in the CP optimizer reflect those stored in
            <span class="code">solution</span>. Otherwise the CP optimizer's state remains unchanged and <span class="code">IloFalse</span> is
            returned.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SameCommonSubsequence.htm">SameCommonSubsequence(IIntervalSequenceVar, IIntervalSequenceVar)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function creates a same-common-subsequence constraint between sequence variables
            <span class="code">seq1</span> and <span class="code">seq2</span>.
            Sequence variables <span class="code">seq1</span> and <span class="code">seq2</span> should be of the same size.
            The mapping between interval variables of the two sequences is given by the order of the interval
            variables in the arrays <span class="code">a1</span> and <span class="code">a2</span> used in the definition of the sequences.
            The constraint states that the sub-sequences defined by <span class="code">seq1</span> and <span class="code">seq2</span>
            by only considering the pairs of present intervals <span class="code">(a1[i],a2[i])</span> are identical modulo the mapping
            between intervals <span class="code">a1[i]</span> and <span class="code">a2[i]</span>.</p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SameCommonSubsequence_3.htm">SameCommonSubsequence(IIntervalSequenceVar, IIntervalSequenceVar, String)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SameCommonSubsequence_1.htm">SameCommonSubsequence(IIntervalSequenceVar, IIntervalSequenceVar, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function creates a same-common-subsequence constraint between sequence variables
            <span class="code">seq1</span> and <span class="code">seq2</span>.
            The mapping between interval variables of the two sequences is specified by arrays <span class="code">a1</span>
            and <span class="code">a2</span>, those two arrays should be of the same size. Array <span class="code">a1</span> must only
            contain interval variables of sequence <span class="code">seq1</span> without any duplicate and array <span class="code">a2</span>
            must only contain interval variables of sequence <span class="code">seq2</span> without any duplicate.
            The constraint states that the sub-sequences defined by <span class="code">seq1</span> and <span class="code">seq2</span>
            by only considering the pairs of present intervals <span class="code">(a1[i],a2[i])</span> are identical modulo the mapping
            between intervals <span class="code">a1[i]</span> and <span class="code">a2[i]</span>.</p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SameCommonSubsequence_2.htm">SameCommonSubsequence(IIntervalSequenceVar, IIntervalSequenceVar, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, String)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function creates a same-common-subsequence constraint between sequence variables
            <span class="code">seq1</span> and <span class="code">seq2</span>.
            The mapping between interval variables of the two sequences is specified by arrays <span class="code">a1</span>
            and <span class="code">a2</span>, those two arrays should be of the same size. Array <span class="code">a1</span> must only
            contain interval variables of sequence <span class="code">seq1</span> without any duplicate and array <span class="code">a2</span>
            must only contain interval variables of sequence <span class="code">seq2</span> without any duplicate.
            The constraint states that the sub-sequences defined by <span class="code">seq1</span> and <span class="code">seq2</span>
            by only considering the pairs of present intervals <span class="code">(a1[i],a2[i])</span> are identical modulo the mapping
            between intervals <span class="code">a1[i]</span> and <span class="code">a2[i]</span>. You can specify
            a <span class="code">name</span> of your own choice for the constraint.</p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SameSequence.htm">SameSequence(IIntervalSequenceVar, IIntervalSequenceVar)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SameSequence_3.htm">SameSequence(IIntervalSequenceVar, IIntervalSequenceVar, String)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SameSequence_1.htm">SameSequence(IIntervalSequenceVar, IIntervalSequenceVar, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function creates a same-sequence constraint between sequence variables
            <span class="code">seq1</span> and <span class="code">seq2</span>.
            Sequence variables <span class="code">seq1</span> and <span class="code">seq2</span> should be of the same size n.
            The mapping between interval variables of the two sequences is specified by arrays <span class="code">a1</span>
            and <span class="code">a2</span>. Arrays <span class="code">a1</span> and <span class="code">a2</span> should be of same size n.
            The constraint states that the two sequences <span class="code">seq1</span> and
            <span class="code">seq2</span> are identical modulo a mapping between intervals <span class="code">a1[i]</span> and
            <span class="code">a2[i]</span>.</p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SameSequence_2.htm">SameSequence(IIntervalSequenceVar, IIntervalSequenceVar, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, String)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function creates a same-sequence constraint between sequence variables
            <span class="code">seq1</span> and <span class="code">seq2</span>.
            Sequence variables <span class="code">seq1</span> and <span class="code">seq2</span> should be of the same size n.
            The mapping between interval variables of the two sequences is specified by arrays <span class="code">a1</span>
            and <span class="code">a2</span>. Arrays <span class="code">a1</span> and <span class="code">a2</span> should be of same size n.
            The constraint states that the two sequences <span class="code">seq1</span> and
            <span class="code">seq2</span> are identical modulo a mapping between intervals <span class="code">a1[i]</span> and
            <span class="code">a2[i]</span>. You can specify a <span class="code">name</span> of your own choice for the constraint.</p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SearchPhase.htm">SearchPhase(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalSequenceVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SearchPhase_1.htm">SearchPhase(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SearchPhase_2.htm">SearchPhase(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SearchPhase_4.htm">SearchPhase(IIntVarChooser, IIntValueChooser)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SearchPhase_3.htm">SearchPhase(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, IIntVarChooser, IIntValueChooser)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SelectLargest.htm">SelectLargest(IIntValueEval)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a selector of value assignments to a variable that selects all values having the largest
            evaluation according to the evaluator <span class="code">eval</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SelectLargest_2.htm">SelectLargest(IIntVarEval)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a selector of integer variables that selects 
            all variables having the largest evaluation
            according to the evaluator <span class="code">eval</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SelectLargest_4.htm">SelectLargest(Double, IIntValueEval)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a selector of value assignments to a variable that selects at least <span class="code">minNumber</span>
            values having the largest evaluation according to the evaluator <span class="code">eval</span>. The parameter
            <span class="code">minNumber</span> must be at least 1.  For example, suppose that eight domain values (1-8) have evaluations
            (1) 5, (2) 8, (3) 3, (4) 9, (5) 2, (6) 8, (7) 1, (8) 7. When ordered by decreasing evaluation, this gives: (4) 9,
            (2) 8, (6) 8, (8) 7, (1) 5, (3) 3, (5) 2, (7) 1. If <span class="code">minNumber</span> is 1, then value 4 would be selected,
            if it is 2 or 3, then values 2 and 6 would be selected, and if it is 4 then values 4, 2, 6, and 8 would be
            selected. Note that when <span class="code">minNumber</span> is 2, both 2 and 6 are selected as both are considered
            equivalent.  In addition, it is possible to specify a non-integer value of <span class="code">minNumber</span>. In this case,
            at least <span class="code">floor(minNumber)</span> selections are made, with probability <span class="code">minNumber -
            floor(minNumber)</span> of selecting an additional value.  It is still possible that this selector can select
            less domain values than <span class="code">minNumber</span> if there are less than <span class="code">minNumber</span> values supplied to
            it for selection, in which case all supplied values are selected.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SelectLargest_5.htm">SelectLargest(Double, IIntVarEval)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a selector of integer variables that selects at least <span class="code">minNumber</span> variables
            having the largest evaluation according to the evaluator <span class="code">eval</span>. The parameter <span class="code">minNumber</span>
            must be at least 1.  For example, suppose that eight variables (A-H) have evaluations (A) 5, (B) 8, (C) 3, (D) 9,
            (E) 2, (F) 8, (G) 1, (H) 7. When ordered by decreasing evaluation, this gives: (D) 9, (B) 8, (F) 8, (H) 7, (A) 5,
            (C) 3, (E) 2, (G) 1. If <span class="code">minNumber</span> is 1, then variable D would be selected, if it is 2 or 3, then
            variables B and F would be selected, and if it is 4 then D, B, F, and H would be selected. Note that when
            <span class="code">minNumber</span> is 2, both B and F are selected as both are considered equivalent.  In addition, it is
            possible to specify a non-integer value of <span class="code">minNumber</span>. In this case, at least
            <span class="code">floor(minNumber)</span> selections are made, with probability <span class="code">minNumber - floor(minNumber)</span> of
            selecting an additional variable.  It is still possible that this selector can select less variables than
            <span class="code">minNumber</span> if there are less than <span class="code">minNumber</span> variables supplied to it for selection, in
            which case all supplied variables are selected.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SelectLargest_1.htm">SelectLargest(IIntValueEval, Double)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a selector of integer variable assignments that selects all domain values whose evaluations
            are in the range <span class="code">[max - tol, max]</span>, where <span class="code">max</span> is is the maximum valuation by
            <span class="code">eval</span> over the domain values to be evaluated. The parameter <span class="code">tol</span> must be non-negative.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SelectLargest_3.htm">SelectLargest(IIntVarEval, Double)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a selector of integer variables that selects all 
            variables whose evaluations are in the
            range <span class="code">[max - tol, max]</span>, where <span class="code">max</span> is is the maximum valuation by <span class="code">eval</span> over
            the variables to be evaluated. The parameter <span class="code">tol</span> must be non-negative.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SelectRandomValue.htm">SelectRandomValue</a>
              </td>
              <td>
                <div class="summary">This function returns a selector of integer variable value assignments that selects a domain value randomly. It selects only one value.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SelectRandomVar.htm">SelectRandomVar</a>
              </td>
              <td>
                <div class="summary">This function returns a selector of integer variables that selects a variable randomly from those available. It selects only one variable.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SelectSmallest.htm">SelectSmallest(IIntValueEval)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a selector of value assignments to a variable that selects all values having the smallest
            evaluation according to the evaluator <span class="code">eval</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SelectSmallest_2.htm">SelectSmallest(IIntVarEval)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a selector of integer variables that selects all variables having the smallest evaluation
            according to the evaluator <span class="code">eval</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SelectSmallest_4.htm">SelectSmallest(Double, IIntValueEval)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a selector of integer variable assignments that selects at least <span class="code">minNumber</span>
            domain values having the smallest evaluation according to the evaluator <span class="code">eval</span>. The parameter
            <span class="code">minNumber</span> must be at least 1.  For example, suppose that eight domain values (1-8) have evaluations
            (1) 9, (2) 5, (3) 6, (4) 3, (5) 8, (6) 1, (7) 3, (8) 2. When ordered by increasing evaluation, this gives: (6) 1,
            (8) 2, (4) 3, (7) 3, (2) 5, (3) 6, (5) 8, (1) 9. If <span class="code">minNumber</span> is 1, then value 6 would be selected,
            if it is 2, then values 6 and 8 would be selected, and if it is 3 then values 6, 8, 4 and 7 would be selected.
            Note that when <span class="code">minNumber</span> is 3, both values 4 and 7 are selected as both are considered equivalent.
            In addition, it is possible to specify a non-integer value of <span class="code">minNumber</span>. In this case, at least
            <span class="code">floor(minNumber)</span> selections are made, with probability <span class="code">minNumber - floor(minNumber)</span> of
            selecting an additional value.  It is still possible that this selector can select less values than
            <span class="code">minNumber</span> if there are less than <span class="code">minNumber</span> values supplied to it for selection, in
            which case all supplied values are selected.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SelectSmallest_5.htm">SelectSmallest(Double, IIntVarEval)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a selector of integer variables that selects at least <span class="code">minNumber</span> variables
            having the smallest evaluation according to the evaluator <span class="code">eval</span>. The parameter <span class="code">minNumber</span>
            must be at least 1.  For example, suppose that eight variables (A-H) have evaluations (A) 9, (B) 5, (C) 6, (D) 3,
            (E) 8, (F) 1, (G) 3, (H) 2. When ordered by increasing evaluation, this gives: (F) 1, (H) 2, (D) 3, (G) 3, (B) 5,
            (C) 6, (E) 8, (A) 9. If <span class="code">minNumber</span> is 1, then variable F would be selected, if it is 2, then
            variables F and H would be selected, and if it is 3 or 4 then F, H, D and G would be selected. Note that when
            <span class="code">minNumber</span> is 3, both D and G are selected as both are considered equivalent.  In addition, it is
            possible to specify a non-integer value of <span class="code">minNumber</span>. In this case, at least
            <span class="code">floor(minNumber)</span> selections are made, with probability <span class="code">minNumber - floor(minNumber)</span> of
            selecting an additional variable.  It is still possible that this selector can select less variables than
            <span class="code">minNumber</span> if there are less than <span class="code">minNumber</span> variables supplied to it for selection, in
            which case all supplied variables are selected.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SelectSmallest_1.htm">SelectSmallest(IIntValueEval, Double)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a selector of integer variable assignments that selects all domain values whose evaluations
            are in the range <span class="code">[min, min + tol]</span>, where <span class="code">min</span> is is the minimum valuation by
            <span class="code">eval</span> over the domain values to be evaluated. The parameter <span class="code">tol</span> must be non-negative.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SelectSmallest_3.htm">SelectSmallest(IIntVarEval, Double)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a selector of integer variables that selects all variables whose evaluations are in the
            range <span class="code">[min, min + tol]</span>, where <span class="code">min</span> is is the minimum valuation by <span class="code">eval</span> over
            the variables to be evaluated. The parameter <span class="code">tol</span> must be non-negative.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SetError.htm">SetError</a>
              </td>
              <td>
                <div class="summary">Sets the error stream of the invoking <span class="code">CP</span> object. After this call, all errors will be output via the new stream.  Passing <span class="code">null</span> as the new output stream will turn off all errors.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SetOut.htm">SetOut</a>
              </td>
              <td>
                <div class="summary">Sets the default output stream of the invoking <span class="code">CP</span> object.  After this call, all logging output will be output via the new stream.  Passing <span class="code">null</span> as the new output stream will turn off all logging output.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SetParameter_4.htm">SetParameter(String, Double)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SetParameter_5.htm">SetParameter(String, String)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SetParameter.htm">SetParameter(CP<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>DoubleParam, CP<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>ParameterValues)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This method sets the floating-point parameter <span class="code">param</span> to the value <span class="code">value</span> in the
            invoked <span class="code">CP</span> instance.</p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SetParameter_1.htm">SetParameter(CP<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>DoubleParam, Double)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This method sets the floating-point parameter <span class="code">param</span> to the value <span class="code">value</span> in the
            invoked <span class="code">CP</span> instance.</p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SetParameter_2.htm">SetParameter(CP<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>IntParam, CP<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>ParameterValues)</a>
              </td>
              <td>
                <div class="summary">
            This method sets the integer parameter <span class="code">param</span> to the value <span class="code">value</span> in the invoked <span class="code">CP</span>
            instance.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SetParameter_3.htm">SetParameter(CP<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>IntParam, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This method sets the integer parameter <span class="code">param</span> to the value <span class="code">value</span> in the invoked <span class="code">CP</span>
            instance.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SetStartingPoint.htm">SetStartingPoint</a>
              </td>
              <td>
                <div class="summary">
             This member function sets solution <span class="code">sp</span> as the new
             starting point for subsequent searches of the invoking
             CP Optimizer engine.
            
             For more information on starting points, see the
             <em>Starting Point</em> concept.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SetWarning.htm">SetWarning</a>
              </td>
              <td>
                <div class="summary">Sets the warning stream of the invoking <span class="code">CP</span> object. After this call, all warnings will be output via the new stream.  Passing <span class="code">null</span> as the new output stream will turn off all warnings.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SizeEval.htm">SizeEval(IIntervalVar, INumToNumSegmentFunction)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a numerical expression that represents the
            value of function <span class="code">f</span> evaluated on the size of interval
            variable <span class="code">a</span> whenever the interval variable is
            present. When the interval variable is absent, it returns <span class="code">0</span>.</p>
                  <p>For more information on expressions on interval
            variables, see 
            the Concepts section of the C++ API Reference Manual.  </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SizeEval_1.htm">SizeEval(IIntervalVar, INumToNumSegmentFunction, Double)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a numerical expression that represents the
            value of function <span class="code">f</span> evaluated on the size of interval
            variable <span class="code">a</span> whenever the interval variable is
            present. When the interval variable is absent, it returns the
            constant numerical value <span class="code">absVal</span> (by default: 0).</p>
                  <p>For more information on expressions on interval
            variables, see 
            the Concepts section of the C++ API Reference Manual. </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SizeOf.htm">SizeOf(IIntervalVar)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns an integer expression that represents the
            size of interval variable <span class="code">a</span> whenever the interval
            variable is present. When the interval variable is absent, it
            returns <span class="code">0</span>.</p>
                  <p>For more information on expressions on interval variables, see 
            the Concepts section of the C++ API Reference Manual. </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SizeOf_1.htm">SizeOf(IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns an integer expression that represents the
            size of interval variable <span class="code">a</span> whenever the interval
            variable is present. When the interval variable is absent, it
            returns the constant integer value <span class="code">absVal</span> (by default:
            0).</p>
                  <p>For more information on expressions on interval variables, see 
            the Concepts section of the C++ API Reference Manual.  </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SizeOfNext.htm">SizeOfNext(IIntervalSequenceVar, IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns an integer expression that represents the
             size of the interval variable that is next to interval
             <span class="code">a</span> in sequence variable <span class="code">seq</span>. When
             interval <span class="code">a</span> is present and is the last interval of
             sequence <span class="code">seq</span>, it returns the constant integer value
             <span class="code">lastVal</span>. When interval <span class="code">a</span> is absent, it
             returns 0.</p>
                  <p>For more information on interval variable sequencing, see
             the concept <em>Interval variable sequencing</em> in
             the C++ Reference Manual. </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SizeOfNext_1.htm">SizeOfNext(IIntervalSequenceVar, IIntervalVar, Int32, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns an integer expression that represents the
             size of the interval variable that is next to interval
             <span class="code">a</span> in sequence variable <span class="code">seq</span>. When
             interval <span class="code">a</span> is present and is the last interval of
             sequence <span class="code">seq</span>, it returns the constant integer value
             <span class="code">lastVal</span>. When interval <span class="code">a</span> is absent, it
             returns the constant integer value <span class="code">absVal</span>.</p>
                  <p>For more information on interval variable sequencing, see
             the concept <em>Interval variable sequencing</em> in
             the C++ Reference Manual. </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SizeOfPrevious.htm">SizeOfPrevious(IIntervalSequenceVar, IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns an integer expression that represents the
             size of the interval variable that is previous to interval
             <span class="code">a</span> in sequence variable <span class="code">seq</span>. When
             interval <span class="code">a</span> is present and is the first interval of
             sequence <span class="code">seq</span>, it returns the constant integer value
             <span class="code">firstVal</span>. When interval <span class="code">a</span> is absent, it
             returns 0.</p>
                  <p>For more information on interval variable sequencing, see
             the concept <em>Interval variable sequencing</em> in
             the C++ Reference Manual. </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SizeOfPrevious_1.htm">SizeOfPrevious(IIntervalSequenceVar, IIntervalVar, Int32, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns an integer expression that represents the
             size of the interval variable that is previous to interval
             <span class="code">a</span> in sequence variable <span class="code">seq</span>. When
             interval <span class="code">a</span> is present and is the first interval of
             sequence <span class="code">seq</span>, it returns the constant integer value
             <span class="code">firstVal</span>. When interval <span class="code">a</span> is absent, it
             returns the constant integer value <span class="code">absVal</span>.</p>
                  <p>For more information on interval variable sequencing, see
             the concept <em>Interval variable sequencing</em> in
             the C++ Reference Manual. </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Solution.htm">Solution</a>
              </td>
              <td>
                <div class="summary">This method creates and returns an instance of ISolution. 
            You can define what variables are stored in the solution by adding 
            variables direction to the solution returned.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Solve.htm">Solve<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span><span class="fs">()</span></span></a>
              </td>
              <td>
                <div class="summary">
            This member function solves a problem using CP Optimizer's built-in strategy. The built-in 
            strategy is determined
            by setting the parameter <span class="code">CP.SearchType</span>. If the model contains an objective (instance of
            <span class="code">{IObjective}</span>), then the optimal solution with respect to the objective will be calculated.
            Otherwise, a solution satisfying all problem constraints will be calculated. If no such solution exists, the
            function returns <span class="code">False</span>, otherwise, it returns <span class="code">True</span>.  <div class="alert"><table><tr><th><img src="../icons/alert_note.gif" title="Note" alt="Note" /> <b>Note</b></th></tr><tr><td> If the search has
            been limited in time or fails, via the parameters <span class="code">FailLimit</span> or <span class="code">TimeLimit</span>,
            then the search is not guaranteed to return the optimal solution, but the best one found within the limit
            available. </td></tr></table></div></div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Solve_1.htm">Solve(ISearchPhase)</a>
              </td>
              <td>
                <div class="summary">
            This member function solves a problem using CP Optimizer's built-in strategy guided by a search phase. The
            built-in strategy is determined by setting the parameter <span class="code">CP.SearchType</span>. If the model contains an
            objective (instance of <span class="code"><a href="T_ILOG_Concert_IObjective.htm">IObjective</a></span>), then the optimal solution with respect to the
            objective will be calculated. Otherwise, a solution satisfying all problem constraints will be calculated. If no
            such solution exists, the function returns <span class="code">False</span>, otherwise, it returns <span class="code">True</span>.
            <div class="alert"><table><tr><th><img src="../icons/alert_note.gif" title="Note" alt="Note" /> <b>Note</b></th></tr><tr><td> If the search has been limited in time or fails, via the parameters <span class="code">FailLimit</span> or
            <span class="code">TimeLimit</span>, then the search is not guaranteed to return the optimal solution, but the best one
            found within the limit available. </td></tr></table></div></div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Solve_2.htm">Solve(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>ISearchPhase<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            This member function solves a problem using CP Optimizer's built-in strategy guided by an array of search phases.
            The built-in strategy is determined by setting the parameter <span class="code">CP.SearchType</span>. If the model
            contains an objective (instance of <span class="code"><a href="T_ILOG_Concert_IObjective.htm">IObjective</a></span>), then the optimal solution with respect to
            the objective will be calculated. Otherwise, a solution satisfying all problem constraints will be calculated. If
            no such solution exists, the function returns <span class="code">False</span>, otherwise, it returns <span class="code">True</span>.
            <div class="alert"><table><tr><th><img src="../icons/alert_note.gif" title="Note" alt="Note" /> <b>Note</b></th></tr><tr><td> If the search has been limited in time or fails, via the parameters <span class="code">FailLimit</span> or
            <span class="code">TimeLimit</span>, then the search is not guaranteed to return the optimal solution, but the best one
            found within the limit available. </td></tr></table></div></div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Span.htm">Span(IIntervalVar, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            This method creates a span constraint between interval variable <span class="code">a</span> and the set
            of interval variables in the array <span class="code">bs</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Span_1.htm">Span(IIntervalVar, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, String)</a>
              </td>
              <td>
                <div class="summary">
            This method creates a span constraint between interval variable <span class="code">a</span> and the set
            of interval variables in the array <span class="code">bs</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StandardDeviation.htm">StandardDeviation(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            This function creates a new constrained numeric expression which is equal to the standard deviation of the values
            of the variables in the array <span class="code">exprs</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StandardDeviation_1.htm">StandardDeviation(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, Double, Double)</a>
              </td>
              <td>
                <div class="summary">
            This function creates a new constrained numeric expression which is equal to the standard deviation of the values
            of the variables in the array <span class="code">exprs</span>.  <p> In addition, the mean of the values of <span class="code">exprs</span>
            will be enforced to lie in the range [<span class="code">meanLB</span>, <span class="code">meanUB</span>]</p></div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartAtEnd.htm">StartAtEnd(IIntervalVar, IIntervalVar)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">end(b)-start(a)</span>between the
            start of interval <span class="code">a</span> and the end of interval
            <span class="code">b</span> must be equal to <span class="code">0</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.</p>
                  <p />
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartAtEnd_1.htm">StartAtEnd(IIntervalVar, IIntervalVar, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">end(b)-start(a)</span>between the
            start of interval <span class="code">a</span> and the end of interval
            <span class="code">b</span> must be equal to <span class="code">z</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.</p>
                  <p />
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartAtEnd_2.htm">StartAtEnd(IIntervalVar, IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">end(b)-start(a)</span>between the
            start of interval <span class="code">a</span> and the end of interval
            <span class="code">b</span> must be equal to <span class="code">z</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.</p>
                  <p />
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartAtStart.htm">StartAtStart(IIntervalVar, IIntervalVar)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">start(b)-start(a)</span>between the
            start of interval <span class="code">a</span> and the start of interval
            <span class="code">b</span> must be equal to <span class="code">0</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.</p>
                  <p />
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartAtStart_1.htm">StartAtStart(IIntervalVar, IIntervalVar, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">start(b)-start(a)</span>between the
            start of interval <span class="code">a</span> and the start of interval
            <span class="code">b</span> must be equal to <span class="code">z</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.</p>
                  <p />
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartAtStart_2.htm">StartAtStart(IIntervalVar, IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">start(b)-start(a)</span>between the
            start of interval <span class="code">a</span> and the start of interval
            <span class="code">b</span> must be equal to <span class="code">z</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.</p>
                  <p />
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartBeforeEnd.htm">StartBeforeEnd(IIntervalVar, IIntervalVar)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">end(b)-start(a)</span> between the
            start of interval <span class="code">a</span> and the end of interval
            <span class="code">b</span> must be greater than or equal to <span class="code">0</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.</p>
                  <p />
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartBeforeEnd_1.htm">StartBeforeEnd(IIntervalVar, IIntervalVar, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">end(b)-start(a)</span>between the
            start of interval <span class="code">a</span> and the end of interval
            <span class="code">b</span> must be greater than or equal to <span class="code">z</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.</p>
                  <p />
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartBeforeEnd_2.htm">StartBeforeEnd(IIntervalVar, IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">end(b)-start(a)</span> between the
            start of interval <span class="code">a</span> and the end of interval
            <span class="code">b</span> must be greater than or equal to <span class="code">z</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.</p>
                  <p />
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartBeforeStart.htm">StartBeforeStart(IIntervalVar, IIntervalVar)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">start(b)-start(a)</span> between the
            start of interval <span class="code">a</span> and the start of interval
            <span class="code">b</span> must be greater than or equal to <span class="code">0</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.</p>
                  <p />
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartBeforeStart_1.htm">StartBeforeStart(IIntervalVar, IIntervalVar, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">start(b)-start(a)</span> between the
            start of interval <span class="code">a</span> and the start of interval
            <span class="code">b</span> must be greater than or equal to <span class="code">z</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.</p>
                  <p />
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartBeforeStart_2.htm">StartBeforeStart(IIntervalVar, IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">start(b)-start(a)</span> between the
            start of interval <span class="code">a</span> and the start of interval
            <span class="code">b</span> must be greater than or equal to <span class="code">z</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.</p>
                  <p />
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartEval.htm">StartEval(IIntervalVar, INumToNumSegmentFunction)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a numerical expression that represents the
            value of function <span class="code">f</span> evaluated on the start of interval
            variable <span class="code">a</span> whenever the interval variable is
            present. When the interval variable is absent, it returns <span class="code">0</span>.</p>
                  <p>For more information on expressions on interval
            variables, see 
            the Concepts section of the C++ API Reference Manual. </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartEval_1.htm">StartEval(IIntervalVar, INumToNumSegmentFunction, Double)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns a numerical expression that represents the
            value of function <span class="code">f</span> evaluated on the start of interval
            variable <span class="code">a</span> whenever the interval variable is
            present. When the interval variable is absent, it returns the
            constant numerical value <span class="code">absVal</span> (by default: 0).</p>
                  <p>For more information on expressions on interval
            variables, see 
            the Concepts section of the C++ API Reference Manual. </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartNewSearch.htm">StartNewSearch<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span><span class="fs">()</span></span></a>
              </td>
              <td>
                <div class="summary">This member function starts a new search using the built-in strategy of <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>. It should be used in conjunction with the functions <span class="code"><a href="M_ILOG_CP_CP_Next.htm">Next<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span><span class="fs">()</span></span></a></span> and <span class="code"><a href="M_ILOG_CP_CP_EndSearch.htm">EndSearch<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span><span class="fs">()</span></span></a></span>.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartNewSearch_1.htm">StartNewSearch(ISearchPhase)</a>
              </td>
              <td>
                <div class="summary">
            This member function starts a new search using a single search phase <span class="code">phase</span>. It should be used in
            conjunction with the functions <span class="code"><a href="M_ILOG_CP_CP_Next.htm">Next<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span><span class="fs">()</span></span></a></span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartNewSearch_2.htm">StartNewSearch(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>ISearchPhase<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            This member function starts a new search using the search phase array <span class="code">phaseArray</span>. It should be used
            in conjunction with the function <span class="code"><a href="M_ILOG_CP_CP_Next.htm">Next<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span><span class="fs">()</span></span></a></span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartOf.htm">StartOf(IIntervalVar)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns an integer expression that represents the
             start of interval variable <span class="code">a</span> whenever the interval
             variable is present. When the interval variable is absent, it
             returns <span class="code">0</span>.</p>
                  <p>For more information on expressions on interval variables, see 
             the Concepts in the C++ API Reference Manual. </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartOf_1.htm">StartOf(IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns an integer expression that represents the
            start of interval variable <span class="code">a</span> whenever the interval
            variable is present. When the interval variable is absent, it
            returns the constant integer value <span class="code">absVal</span> (by default:
            0).</p>
                  <p>For more information on expressions on interval variables, see 
            the Concepts section of the C++ API Reference Manual. </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartOfNext.htm">StartOfNext(IIntervalSequenceVar, IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns an integer expression that represents the
             start of the interval variable that is next to interval
             <span class="code">a</span> in sequence variable <span class="code">seq</span>. When
             interval <span class="code">a</span> is present and is the last interval of
             sequence <span class="code">seq</span>, it returns the constant integer value
             <span class="code">lastVal</span>. When interval <span class="code">a</span> is absent, it
             returns 0.</p>
                  <p>For more information on interval variable sequencing, see
             the concept <em>Interval variable sequencing</em> in
             the C++ Reference Manual. </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartOfNext_1.htm">StartOfNext(IIntervalSequenceVar, IIntervalVar, Int32, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns an integer expression that represents the
             start of the interval variable that is next to interval
             <span class="code">a</span> in sequence variable <span class="code">seq</span>. When
             interval <span class="code">a</span> is present and is the last interval of
             sequence <span class="code">seq</span>, it returns the constant integer value
             <span class="code">lastVal</span>. When interval <span class="code">a</span> is absent, it
             returns the constant integer value <span class="code">absVal</span>.</p>
                  <p>For more information on interval variable sequencing, see
             the concept <em>Interval variable sequencing</em> in
             the C++ Reference Manual. </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartOfPrevious.htm">StartOfPrevious(IIntervalSequenceVar, IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns an integer expression that represents the
             start of the interval variable that is previous to interval
             <span class="code">a</span> in sequence variable <span class="code">seq</span>. When
             interval <span class="code">a</span> is present and is the first interval of
             sequence <span class="code">seq</span>, it returns the constant integer value
             <span class="code">firstVal</span>. When interval <span class="code">a</span> is absent, it
             returns 0.</p>
                  <p>For more information on interval variable sequencing, see
             the concept <em>Interval variable sequencing</em> in
             the C++ Reference Manual. </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartOfPrevious_1.htm">StartOfPrevious(IIntervalSequenceVar, IIntervalVar, Int32, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns an integer expression that represents the
             start of the interval variable that is previous to interval
             <span class="code">a</span> in sequence variable <span class="code">seq</span>. When
             interval <span class="code">a</span> is present and is the first interval of
             sequence <span class="code">seq</span>, it returns the constant integer value
             <span class="code">firstVal</span>. When interval <span class="code">a</span> is absent, it
             returns the constant integer value <span class="code">absVal</span>.</p>
                  <p>For more information on interval variable sequencing, see
             the concept <em>Interval variable sequencing</em> in
             the C++ Reference Manual. </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StateFunction.htm">StateFunction<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span><span class="fs">()</span></span></a>
              </td>
              <td>
                <div class="summary">
            This method creates an instance of state function.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StateFunction_3.htm">StateFunction(String)</a>
              </td>
              <td>
                <div class="summary">
            This method creates an instance of state function.
            You can specify a <span class="code">name</span> of your own
            choice. 
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StateFunction_1.htm">StateFunction(ITransitionDistance)</a>
              </td>
              <td>
                <div class="summary">
            This method creates an instance of state function with transition distance
            <span class="code">tdist</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StateFunction_2.htm">StateFunction(ITransitionDistance, String)</a>
              </td>
              <td>
                <div class="summary">
            This method creates an instance of state function with transition distance
            <span class="code">tdist</span>. You can specify a <span class="code">name</span> of your own choice.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StaticLex.htm">StaticLex(INumExpr)</a>
              </td>
              <td>
                <div class="summary">
            This function defines a multicriteria expression for lexicographic ordering.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StaticLex_4.htm">StaticLex(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>INumExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            This function defines a multicriteria expression for lexicographic ordering.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StaticLex_1.htm">StaticLex(INumExpr, INumExpr)</a>
              </td>
              <td>
                <div class="summary">
            This function defines a multicriteria expression for lexicographic ordering.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StaticLex_5.htm">StaticLex(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>INumExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, String)</a>
              </td>
              <td>
                <div class="summary">
            This function defines a multicriteria expression for lexicographic ordering.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StaticLex_2.htm">StaticLex(INumExpr, INumExpr, INumExpr)</a>
              </td>
              <td>
                <div class="summary">
            This function defines a multicriteria expression for lexicographic ordering.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StaticLex_3.htm">StaticLex(INumExpr, INumExpr, INumExpr, INumExpr)</a>
              </td>
              <td>
                <div class="summary">
            This function defines a multicriteria expression for lexicographic ordering.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Step.htm">Step</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns an elementary cumul function expression
            that is equal to <span class="code">0</span> before point <span class="code">t</span> and
            equal to <span class="code">v</span> after point <span class="code">t</span>.</p>
                  <p />
                  <p>For more information on cumul function expressions, see 
            the Concepts section of the C++ API Reference Manual.  </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StepAtEnd.htm">StepAtEnd(IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns an elementary cumul function expression
            that is constant over a certain interval and null before that</p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StepAtEnd_1.htm">StepAtEnd(IIntervalVar, Int32, Int32)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StepAtStart.htm">StepAtStart(IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns an elementary cumul function expression
            that is constant over a certain interval and null before that</p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StepAtStart_1.htm">StepAtStart(IIntervalVar, Int32, Int32)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Store.htm">Store</a>
              </td>
              <td>
                <div class="summary">
            This member function stores the values of the objects added to <span class="code">solution</span> by examining their current
            values in the invoking <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Strong.htm">Strong</a>
              </td>
              <td>
                <div class="summary">
             Gives a strengthening hint over a number of variables.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Sum_1.htm">Sum(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td> (Overrides <span class="nolink">IloModelerImplSum(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</span>.)</td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Sum_2.htm">Sum(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>INumExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td> (Overrides <span class="nolink">IloModelerImplSum(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>INumExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</span>.)</td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Sum.htm">Sum(ICumulFunctionExpr, ICumulFunctionExpr)</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Synchronize.htm">Synchronize(IIntervalVar, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            This method creates a synchronization constraint between interval variable <span class="code">a</span>
            and the set of interval variables in the array <span class="code">bs</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Synchronize_1.htm">Synchronize(IIntervalVar, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, String)</a>
              </td>
              <td>
                <div class="summary">
            This method creates a synchronization constraint between interval variable <span class="code">a</span>
            and the set of interval variables in the array <span class="code">bs</span>.
            </div>
              </td>
            </tr>
            <tr data="public;inherited;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <span class="nolink">ToString</span>
              </td>
              <td>
                <div class="summary">Returns a string that represents the current object.</div> (Inherited from <span class="nolink">Object</span>.)</td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_TransitionDistance.htm">TransitionDistance(Int32)</a>
              </td>
              <td>
                <div class="summary">
            This method returns an instance of transition distance of the specified size <span class="code">i</span>.
            Initially, the transition distance between any two indices is 0. You need to fill the transition distance using
             the member function <span class="code">setValue</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_TransitionDistance_1.htm">TransitionDistance(Int32, String)</a>
              </td>
              <td>
                <div class="summary">
            This method returns an instance of transition distance of the specified size <span class="code">i</span>.
            Initially, the transition distance between any two indices is 0. You need to fill the transition distance using
            the member function <span class="code">setValue</span>. You can specify a <span class="code">name</span> of your own choice.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_TransitionDistance_2.htm">TransitionDistance(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span><span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span><span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, String)</a>
              </td>
              <td>
                <div class="summary">
            This method returns an instance of transition distance. The 2-dimensional integer array
            argument <span class="code">dtable</span> gives the values of the transition distance.
            You can specify a <span class="code">name</span> of your own choice.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_TrueConstraint.htm">TrueConstraint</a>
              </td>
              <td>
                <div class="summary">Creates and returns a new constraint that is always true.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_TypeOfNext.htm">TypeOfNext(IIntervalSequenceVar, IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns an integer expression that represents the
             type of the interval variable that is next to interval
             <span class="code">a</span> in sequence variable <span class="code">seq</span>. When
             interval <span class="code">a</span> is present and is the last interval of
             sequence <span class="code">seq</span>, it returns the constant integer value
             <span class="code">lastVal</span>. When interval <span class="code">a</span> is absent, it
             returns 0.</p>
                  <p>For more information on interval variable sequencing, see
             the concept <em>Interval variable sequencing</em> in
             the C++ Reference Manual. </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_TypeOfNext_1.htm">TypeOfNext(IIntervalSequenceVar, IIntervalVar, Int32, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns an integer expression that represents the
             type of the interval variable that is next to interval
             <span class="code">a</span> in sequence variable <span class="code">seq</span>. When
             interval <span class="code">a</span> is present and is the last interval of
             sequence <span class="code">seq</span>, it returns the constant integer value
             <span class="code">lastVal</span>. When interval <span class="code">a</span> is absent, it
             returns the constant integer value <span class="code">absVal</span>.</p>
                  <p>For more information on interval variable sequencing, see
             the concept <em>Interval variable sequencing</em> in
             the C++ Reference Manual. </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_TypeOfPrevious.htm">TypeOfPrevious(IIntervalSequenceVar, IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns an integer expression that represents the
             type of the interval variable that is previous to interval
             <span class="code">a</span> in sequence variable <span class="code">seq</span>. When
             interval <span class="code">a</span> is present and is the first interval of
             sequence <span class="code">seq</span>, it returns the constant integer value
             <span class="code">firstVal</span>. When interval <span class="code">a</span> is absent, it
             returns 0.</p>
                  <p>For more information on interval variable sequencing, see
             the concept <em>Interval variable sequencing</em> in
             the C++ Reference Manual. </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_TypeOfPrevious_1.htm">TypeOfPrevious(IIntervalSequenceVar, IIntervalVar, Int32, Int32)</a>
              </td>
              <td>
                <div class="summary">
                  <p>This function returns an integer expression that represents the
             type of the interval variable that is previous to interval
             <span class="code">a</span> in sequence variable <span class="code">seq</span>. When
             interval <span class="code">a</span> is present and is the first interval of
             sequence <span class="code">seq</span>, it returns the constant integer value
             <span class="code">firstVal</span>. When interval <span class="code">a</span> is absent, it
             returns the constant integer value <span class="code">absVal</span>.</p>
                  <p>For more information on interval variable sequencing, see
             the concept <em>Interval variable sequencing</em> in
             the C++ Reference Manual. </p>
                </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Value.htm">Value</a>
              </td>
              <td>
                <div class="summary">This function returns a value evaluator. It returns as evaluation the value itself. This is useful to define instantiation strategies that choose the smallest or the largest value in a domain.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ValueImpact.htm">ValueImpact</a>
              </td>
              <td>
                <div class="summary">This function returns a value evaluator. The evaluation is the average reduction of the search space observed so far when instantiating the selected variable to the evaluated value. The greater the evaluation, the more space reduction this instantiation achieves. In general it is a good strategy to prefer a value having the smallest impact.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ValueIndex.htm">ValueIndex(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">This method is a shortcut to <span class="code">valueIndex(vals, -1)</span>.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ValueIndex_1.htm">ValueIndex(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, Int32)</a>
              </td>
              <td>
                <div class="summary">This function returns a value evaluator. The evaluation of each value is the index of the value in the array <span class="code">vals</span>. That is, the evaluation of <span class="code">valueArray[i]</span> is <span class="code">i</span>. If the value does not appear in the array, <span class="code">defaultEval</span> is the evaluation returned.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ValueSuccessRate.htm">ValueSuccessRate</a>
              </td>
              <td>
                <div class="summary">This function returns a value evaluator. The evaluation is the success rate of instantiating the selected variable to the evaluated value. Assuming the selected variable has been instantiated to the evaluated value <span class="code">n</span> times so far and this has resulted in <span class="code">f</span> failures, the success rate is <span class="code">(n-f)/n</span>.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_VarImpact.htm">VarImpact</a>
              </td>
              <td>
                <div class="summary">This function returns a variable evaluator. The evaluation is the the average reduction of the search space observed so far for this variable. The greater the evaluation, the more space reduction this variable achieves. In general, it is a good strategy to start with variable having the greatest impact in order to reduce the search space size.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_VarIndex.htm">VarIndex(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            This method is a shortcut to <span class="code">varIndex(vars, -1)</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_VarIndex_1.htm">VarIndex(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a variable evaluator. The evaluation of a variable is the index of the variable in the
            array <span class="code">vars</span>. That is, the evaluation of <span class="code">vars[i]</span> is <span class="code">i</span>. If the variable does not
            appear in the array, <span class="code">defaultEval</span> is the evaluation returned.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_VarLocalImpact.htm">VarLocalImpact<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span><span class="fs">()</span></span></a>
              </td>
              <td>
                <div class="summary">This method is a shortcut to <span class="code">varLocalImpact(-1)</span>.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_VarLocalImpact_1.htm">VarLocalImpact(Int32)</a>
              </td>
              <td>
                <div class="summary">This function returns a variable evaluator. The evaluation is the impact of the variable computed at the current node of the search tree. This computation is made by probing on values from the domain of the variables. The parameter effort indicates how much effort sould be spent to compute this impact. When <span class="code">effort</span> is equal to -1, every value of the domain is probed otherwise the nunber of probes effort will increase as the effort value increases.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_VarSuccessRate.htm">VarSuccessRate</a>
              </td>
              <td>
                <div class="summary">This function returns a variable evaluator. The evaluation is the the success rate of the variable. Assuming the evaluated variable has been instantiated <span class="code">n</span> times so far and this has resulted in <span class="code">f</span> failures, the success rate is <span class="code">(n-f)/n</span>.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Warning.htm">Warning</a>
              </td>
              <td>
                <div class="summary">Returns the warning output stream of the invoking <span class="code">CP</span> object. This stream is used by <span class="code">CP</span> for printing warnings. It can be set with the method <span class="code">CP.SetWarning</span>.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_WriteConflict.htm">WriteConflict</a>
              </td>
              <td>
                <div class="summary">
                  <p>This member function displays the current conflict. It will not display the 
             constraints that were initially specified as being part of the conflict and that 
             were consequently not refined by the conflict refiner (constraints not in the 
             array of constraints passed to <span class="code">RefineConflict</span> or constraints or 
             groups with preference 0).</p>
                  <p>For more information on the conflict refiner, see the concept <em>Conflict Refiner</em> 
             in the C++ Reference Manual.</p>
                </div>
              </td>
            </tr>
          </table>
        </div>
        <h1 class="heading">Fields</h1>
        <div id="fieldTableSection" class="section" name="collapseableSection" style="">
          <table id="memberList" class="members" frame="lhs" cellpadding="2">
            <col width="10%" />
            <tr>
              <th class="iconColumn">
               
            </th>
              <th class="nameColumn">Name</th>
              <th class="descriptionColumn">Description</th>
            </tr>
            <tr data="public;static;declared;notNetfw;">
              <td>
                <img src="../icons/pubfield.gif" alt="Public field" title="Public field" />
                <img src="../icons/static.gif" alt="Static member" title="Static member" />
              </td>
              <td>
                <a href="F_ILOG_CP_CP_IntervalMax.htm">IntervalMax</a>
              </td>
              <td>
                <div class="summary">
            This constant represents the largest value that can be taken
            by the start or end of an interval variable.
            </div>
              </td>
            </tr>
            <tr data="public;static;declared;notNetfw;">
              <td>
                <img src="../icons/pubfield.gif" alt="Public field" title="Public field" />
                <img src="../icons/static.gif" alt="Static member" title="Static member" />
              </td>
              <td>
                <a href="F_ILOG_CP_CP_IntervalMin.htm">IntervalMin</a>
              </td>
              <td>
                <div class="summary">
            This constant represents the smallest value that can be taken
            by the start or end of an interval variable.
            </div>
              </td>
            </tr>
            <tr data="public;static;declared;notNetfw;">
              <td>
                <img src="../icons/pubfield.gif" alt="Public field" title="Public field" />
                <img src="../icons/static.gif" alt="Static member" title="Static member" />
              </td>
              <td>
                <a href="F_ILOG_CP_CP_NoState.htm">NoState</a>
              </td>
              <td>
                <div class="summary">This static integer of value <span class="code">-1</span> is the conventional value of an instance of
             <span class="code">IStateFunction</span> at any point out of its definition domain.</div>
              </td>
            </tr>
          </table>
        </div>
        <h1 class="heading">Properties</h1>
        <div id="propertyTableSection" class="section" name="collapseableSection" style="">
          <table id="memberList" class="members" frame="lhs" cellpadding="2">
            <col width="10%" />
            <tr>
              <th class="iconColumn">
               
            </th>
              <th class="nameColumn">Name</th>
              <th class="descriptionColumn">Description</th>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubproperty.gif" alt="Public property" title="Public property" />
              </td>
              <td>
                <a href="P_ILOG_CP_CP_ObjValue.htm">ObjValue</a>
              </td>
              <td>
                <div class="summary">
            Numeric value of the objective function associated with the CP engine.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubproperty.gif" alt="Public property" title="Public property" />
              </td>
              <td>
                <a href="P_ILOG_CP_CP_RandomNum.htm">RandomNum</a>
              </td>
              <td>
                <div class="summary">
            a pseudo-randomly generated floating-point value in the range [0..1).
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubproperty.gif" alt="Public property" title="Public property" />
              </td>
              <td>
                <a href="P_ILOG_CP_CP_Version.htm">Version</a>
              </td>
              <td>
                <div class="summary">
            version of the product.
            </div>
              </td>
            </tr>
          </table>
        </div>
        <h1 class="heading">See Also</h1>
        <div id="seeAlsoSection" class="section" name="collapseableSection" style="">
          <div class="seeAlsoStyle">
            <a href="T_ILOG_CP_CP.htm">CP Class</a>
          </div>
          <div class="seeAlsoStyle">
            <a href="N_ILOG_CP.htm">ILOG.CP Namespace</a>
          </div>
        </div>
      </div>
      <div id="footer">
        <div class="footerLine">
          <img width="100%" height="3px" src="../icons/footer.gif" alt="Footer image" title="Footer image" />
        </div>
        <A NAME="feedback"></A>
        <span id="fb" class="feedbackcss"></span>
        <p />© Copyright IBM Corp. 1987, 2014</div>
    </div>
  </body>
</html>