<html xml:lang="en" lang="en" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:msxsl="urn:schemas-microsoft-com:xslt">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" />
    <META NAME="save" CONTENT="history" />
    <title>Cplex Class</title>
    <meta name="Language" content="en-us" />
    <meta name="System.Keywords" content="Cplex class" />
    <meta name="System.Keywords" content="ILOG.CPLEX.Cplex class" />
    <meta name="System.Keywords" content="Cplex class, about Cplex class" />
    <meta name="Microsoft.Help.F1" content="ILOG.CPLEX.Cplex" />
    <meta name="Microsoft.Help.Id" content="T:ILOG.CPLEX.Cplex" />
    <meta name="Description" content="Cplex is the class used to create and solve LP (linear program), QP (program with quadratic terms in the objective function), QCP (quadratically constrained program), and MIP (mixed integer program) Mathematical Programming models." />
    <meta name="Microsoft.Help.ContentType" content="Reference" />
    <link rel="stylesheet" type="text/css" href="../styles/Presentation.css" />
    <link rel="stylesheet" type="text/css" href="ms-help://Hx/HxRuntime/HxLink.css" />
    <script type="text/javascript" src="../scripts/EventUtilities.js"> </script>
    <script type="text/javascript" src="../scripts/SplitScreen.js"> </script>
    <script type="text/javascript" src="../scripts/Dropdown.js"> </script>
    <script type="text/javascript" src="../scripts/script_manifold.js"> </script>
    <script type="text/javascript" src="../scripts/script_feedBack.js"> </script>
    <script type="text/javascript" src="../scripts/CheckboxMenu.js"> </script>
    <script type="text/javascript" src="../scripts/CommonUtilities.js"> </script>
    <meta name="container" content="ILOG.CPLEX" />
    <meta name="file" content="T_ILOG_CPLEX_Cplex" />
    <meta name="guid" content="T_ILOG_CPLEX_Cplex" />
    <xml>
      <MSHelp:Attr Name="AssetID" Value="T:ILOG.CPLEX.Cplex" />
      <MSHelp:TOCTitle Title="Cplex Class" />
      <MSHelp:RLTitle Title="Cplex Class (ILOG.CPLEX)" />
      <MSHelp:Keyword Index="A" Term="T:ILOG.CPLEX.Cplex" />
      <MSHelp:Keyword Index="A" Term="frlrfILOGCPLEXCplexClassTopic" />
      <MSHelp:Keyword Index="K" Term="Cplex class" />
      <MSHelp:Keyword Index="K" Term="ILOG.CPLEX.Cplex class" />
      <MSHelp:Keyword Index="K" Term="Cplex class, about Cplex class" />
      <MSHelp:Keyword Index="F" Term="ILOG.CPLEX.Cplex" />
      <MSHelp:Attr Name="HelpPriority" Value="2" />
      <MSHelp:Attr Name="APIType" Value="Managed" />
      <MSHelp:Attr Name="APILocation" Value="oplall.dll" />
      <MSHelp:Attr Name="APIName" Value="ILOG.CPLEX.Cplex" />
      <MSHelp:Attr Name="DevLang" Value="CSharp" />
      <MSHelp:Attr Name="DevLang" Value="VB" />
      <MSHelp:Attr Name="Locale" Value="en-us" />
      <MSHelp:Attr Name="TopicType" Value="kbSyntax" />
      <MSHelp:Attr Name="TopicType" Value="apiref" />
      <MSHelp:Attr Name="Abstract" Value="Cplex is the class used to create and solve LP (linear program), QP (program with quadratic terms in the objective function), QCP (quadratically constrained program), and MIP (mixed integer program) Mathematical Programmin ..." />
      <MSHelp:Attr Name="AssemblyVersion" Value="12.6.2.0" />
    </xml>
  </head>
  <body>
    <input type="hidden" id="userDataCache" class="userDataStyle" />
    <input type="hidden" id="hiddenScrollOffset" />
    <img id="collapseImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" alt="Collapse image" title="Collapse image" />
    <img id="expandImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" alt="Expand Image" title="Expand Image" />
    <img id="collapseAllImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" alt="CollapseAll image" />
    <img id="expandAllImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" alt="ExpandAll image" />
    <img id="dropDownImage" style="display:none; height:0; width:0;" src="../icons/dropdown.gif" alt="DropDown image" />
    <img id="dropDownHoverImage" style="display:none; height:0; width:0;" src="../icons/dropdownHover.gif" alt="DropDownHover image" />
    <img id="copyImage" style="display:none; height:0; width:0;" src="../icons/copycode.gif" alt="Copy image" title="Copy image" />
    <img id="copyHoverImage" style="display:none; height:0; width:0;" src="../icons/copycodeHighlight.gif" alt="CopyHover image" title="CopyHover image" />
    <div id="header">
      <table id="bottomTable" cellpadding="0" cellspacing="0">
        <tr id="headerTableRow1">
          <td align="left">
            <span id="runningHeaderText">OPL API</span>
          </td>
        </tr>
        <tr id="headerTableRow2">
          <td align="left">
            <span id="nsrTitle">Cplex Class</span>
          </td>
        </tr>
        <tr id="headerTableRow3">
          <td align="left">
            <a href="AllMembers_T_ILOG_CPLEX_Cplex.htm">Members</a> <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a> <span id="headfeedbackarea" class="feedbackhead"><a href="javascript:SubmitFeedback('','OPL API','','','','%20','Customer%20Feedback');"></a></span></td>
        </tr>
      </table>
      <table id="gradientTable">
        <tr>
          <td class="nsrBottom" background="../icons/gradient.gif" />
        </tr>
      </table>
    </div>
    <div id="mainSection">
      <div id="mainBody">
        <div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()" />
        <span style="color: DarkGray"></span>
        <div class="summary">
          <span class="code">Cplex</span> is the class used to create and solve LP (linear program), QP (program with quadratic terms 
            in the objective function), QCP (quadratically constrained program), and MIP (mixed integer program) Mathematical 
            Programming models.</div>
        <p />
        <b>Namespace:</b> <a href="N_ILOG_CPLEX.htm">ILOG.CPLEX</a><br /><b>Assembly:</b> <span sdata="assembly">oplall</span> (in oplall.dll)<h1 class="heading">Syntax</h1><div id="syntaxSection" class="section" name="collapseableSection" style=""><div id="syntaxCodeBlocks" class="code"><span codeLanguage="CSharp"><table><tr><th>C#</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">Cplex</span> : <span class="nolink">IloModelerAdvImpl</span>, <a href="T_ILOG_Concert_IMPModeler.htm">IMPModeler</a>, 
	<a href="T_ILOG_Concert_IModelerAdv.htm">IModelerAdv</a>, <a href="T_ILOG_Concert_IModeler.htm">IModeler</a>, <a href="T_ILOG_Concert_IModel.htm">IModel</a>, <a href="T_ILOG_Concert_IAddable.htm">IAddable</a>, <a href="T_ILOG_Concert_ICopyable.htm">ICopyable</a></pre></td></tr></table></span><span codeLanguage="VisualBasicDeclaration"><table><tr><th>Visual Basic</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">Cplex</span> _
	<span class="keyword">Inherits</span> <span class="nolink">IloModelerAdvImpl</span> _
	<span class="keyword">Implements</span> <a href="T_ILOG_Concert_IMPModeler.htm">IMPModeler</a>, <a href="T_ILOG_Concert_IModelerAdv.htm">IModelerAdv</a>, <a href="T_ILOG_Concert_IModeler.htm">IModeler</a>, <a href="T_ILOG_Concert_IModel.htm">IModel</a>,  _
	<a href="T_ILOG_Concert_IAddable.htm">IAddable</a>, <a href="T_ILOG_Concert_ICopyable.htm">ICopyable</a></pre></td></tr></table></span></div></div><h1 class="heading">Remarks</h1><div id="remarksSection" class="section" name="collapseableSection" style="">This class implements the <span class="code">IMPModeler</span> modeling interface and its base interfaces. See the 
            <em>IBM ILOG CPLEX User's Manual</em> for more information about modeling. <p> Models to be solved by <span class="code">Cplex</span> 
            should be built using the <span class="code">IMPModeler</span> (and base interface) methods to construct objects from the following list:</p><ul><li><b>variables:</b> objects of type <span class="code">INumVar</span> and its extensions <span class="code">IIntVar</span>, <span class="code">IBoolVar</span>, and 
            <span class="code">ISemiContVar</span></li><li><b>range constraints:</b> objects of type <span class="code">IloRange</span> with (piecewise) linear or quadratic expressions</li><li><b>other relational constraints:</b> objects of type <span class="code">IConstraint</span> of the form <em>expr1</em> relation <em>expr2</em>, 
            where both expressions are linear or quadratic and may optionally contain piecewise linear terms.</li><li><b>LP matrices:</b> objects of type <span class="code">ILPMatrix</span></li><li><b>a linear, piecewise linear, or quadratic objective:</b> an object of type <span class="code">IObjective</span> with a (piecewise) 
            linear and/or quadratic expressions</li><li><b>variable type conversions:</b> objects of type <span class="code">IConversion</span></li><li><b>special ordered sets:</b> objects of type <span class="code">ISOS1</span> or <span class="code">ISOS2</span></li></ul><p><span class="code">Cplex</span> stores such models internally in the standard math programming matrix representation:</p><pre>
                 Minimize (or Maximize)   c'x + x'Qx 
                 subject to               L &lt;= Ax &lt;= U 
                                          a_i'x + x'Q_i x &lt;= r_i, for i = 1, ..., q 
                                          l &lt;=  x &lt;= u. 
            </pre><p>Thus A is the matrix of linear constraint coefficients, and L and U are the vectors of lower and upper bounds on 
            the vector of variables, x.  The Q matrix must be positive semi-definite (or negative semi-definite in the maximization 
            case) and represents the quadratic terms of the objective function. The matrices Q_i must be positive semi-definite and 
            represent the quadratic terms of the i-th quadratic constraint, and the a_i are vectors containing the correponding 
            linear terms. For more about the Q_i, see the chapter about QCP in the <em>IBM ILOG CPLEX User's Manual</em>.</p><p> If the model contains integer, Boolean, or semi-continuous variables, or if the model has special ordered sets 
            (SOSs), the model is referred to as a <em>mixed integer program</em> (MIP). You can query whether the active model 
            is a MIP with the method <a href="P_ILOG_CPLEX_Cplex_IsMIP.htm">IsMIP</a>.</p><p> A model with quadratic terms in the objective is referred 
            to as a <em>mixed integer quadratic program</em> (MIQP) if it is also a MIP, and a <em>quadratic program</em> (QP) 
            otherwise. You can query whether the active model has a quadratic objective by calling method <a href="P_ILOG_CPLEX_Cplex_IsQO.htm">IsQO</a>.</p><p> A model with quadratic constraints is referred to as a <em>quadratically constrained program</em> (MIQCP) if it 
            is also a MIP, and as QCP otherwise. You can query whether the active model is quadratically constrained by calling 
            the method <a href="P_ILOG_CPLEX_Cplex_IsQC.htm">IsQC</a>. A QCP may or may not have a quadratic objective; that is, a given problem may be 
            both QP and QCP.  Likewise, a MIQCP may or may not have a quadratic objective; that is, a given problem may be both 
            MIQP and MIQCP. </p><p>If there are no quadratic terms in the objective, no integer constraints, and the problem is not quadratically 
            constrained, it is called a <em>linear program</em> (LP). </p><p>If there are no quadratic terms in the objective, and the problem is not quadratically constrained, but there are 
            integer variables, it is called a <em>mixed integer linear program</em> (MILP). </p><p>Special ordered sets (SOS) fall outside the conventional representation in terms of A and Q matrices and are stored 
            separately.</p><p> Information related to the matrix representation of the model can be queried through these methods:</p><ul><li><span class="code">Cplex.GetNcols</span> for querying the number of columns of A,</li><li><span class="code">Cplex.GetNrows</span> for querying the number of rows of A; that is, the number of linear constraints,</li><li><span class="code">Cplex.GetNQCs</span> for querying the number of quadratic constraints,</li><li><span class="code">Cplex.GetNNZs</span> for querying the number of nonzero elements in A, and </li><li><span class="code">Cplex.GetNSOSs</span> for querying the number of <span class="code">SOS</span>s.</li></ul><p>Additional information about the active model can be obtained through iterators defined on the different types 
            of modeling objects.</p><p><span class="code">Cplex</span> effectively treats all models as MIQCP models. That is, it allows the most general case, although the 
            solution algorithms make efficient use of special cases, such as the absence of quadratic terms in the formulation.</p><p> The method <a href="M_ILOG_CPLEX_Cplex_Solve.htm">Solve<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span><span class="fs">()</span></span></a> is used to solve the active model.  It begins by solving the <em>root relaxation</em>
            of the MIQCP model, where all integrality constraints and SOSs are ignored.  If the model has no integrality constraints 
            or SOSs, then the optimization is complete once the root relaxation is solved.  Otherwise, <span class="code">Cplex</span> uses a branch 
            and cut procedure to reintroduce the integrality constraints and SOS constraints.  See the <em>IBM ILOG CPLEX User's 
            Manual</em> for more information about branch and cut.</p><p> Most users can simply call <span class="code">solve</span> to solve their models. However, several parameters are available for users 
            who require more control. Perhaps the most important one is <span class="code">Cplex.IntParam.RootAlg</span>, which determines the 
            algorithm used to solve the root relaxation. Possible settings, as defined in <span class="code">Cplex.Algorithm</span>, are:</p><ul><li><span class="code">Cplex.Algorithm.Auto</span><br /><span class="code">Cplex</span> automatically selects an algorithm. This is the default setting.</li><li><span class="code">Cplex.Algorithm.Primal</span><br /> Use the primal simplex algorithm.</li><li><span class="code">Cplex.Algorithm.Dual</span><br /> Use the dual simplex algorithm.</li><li><span class="code">Cplex.Algorithm.Network</span><br /> Use network simplex on the embedded network part of the model, followed by 
            dual simplex on the entire model.</li><li><span class="code">Cplex.Algorithm.Barrier</span><br /> Use the barrier algorithm.</li><li><span class="code">Cplex.Algorithm.Sifting</span><br /> Use the sifting algorithm. This option is not available for quadratic problems. 
            If selected nonetheless, <span class="code">Cplex</span> defaults to the <span class="code">Cplex.Algorithm.Auto</span> setting.</li><li><span class="code">Cplex.Algorithm.Concurrent</span><br /> Use several algorithms concurrently. This option is not available for 
            quadratic problems. If selected nonetheless, <span class="code">Cplex</span> defaults to the <span class="code">Cplex.Algorithm.Auto</span> setting.</li></ul><p>Numerous other parameters allow you to control algorithmic aspects of the optimizer.  
            See <a href="T_ILOG_CPLEX_Cplex_IntParam.htm">Cplex<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>IntParam</a>, <a href="T_ILOG_CPLEX_Cplex_DoubleParam.htm">Cplex<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>DoubleParam</a>, 
            and <a href="T_ILOG_CPLEX_Cplex_StringParam.htm">Cplex<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>StringParam</a> for further information. Parameters are set with the method 
            <span class="code">SetParam</span>.</p><p> Even higher levels of control can be achieved through the use of goals (see <a href="T_ILOG_CPLEX_Cplex_Goal.htm">Cplex<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Goal</a>) 
            or callbacks (see <a href="T_ILOG_CPLEX_Cplex_Callback.htm">Cplex<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Callback</a> and its extensions).</p><p> The <span class="code">solve</span> method returns a Boolean value indicating whether (<span class="code">true</span>) or not (<span class="code">false</span>) a solution 
            (not necessarily the optimal one) has been found. Further information about the solution can be queried with the method 
            <span class="code">getStatus</span>.  The return code of type <span class="code">Cplex.Status</span> indicates whether the solution is feasible, bounded, or 
            optimal, or if the model has been proven to be infeasible or unbounded.  See <a href="T_ILOG_CPLEX_Cplex_Status.htm">Cplex<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Status</a> 
            for more information.</p><p> The method <a href="M_ILOG_CPLEX_Cplex_GetCplexStatus.htm">GetCplexStatus<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span><span class="fs">()</span></span></a> provides more detailed information about the status of the optimizer 
            after <a href="M_ILOG_CPLEX_Cplex_Solve.htm">Solve<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span><span class="fs">()</span></span></a> returns. For example, it can provide information about why the optimizer terminated 
            prematurely (time limit, iteration limit, etc.).  The methods <a href="P_ILOG_CPLEX_Cplex_IsPrimalFeasible.htm">IsPrimalFeasible</a> and 
            <a href="P_ILOG_CPLEX_Cplex_IsDualFeasible.htm">IsDualFeasible</a>  can be used to determine whether a primal or dual feasible solution has been found 
            and can be queried.</p><p> The most important solution information computed by <span class="code">Cplex</span> are usually the solution vector and the objective 
            function value. These can be queried with the methods <a href="M_ILOG_CPLEX_Cplex_GetValue.htm">GetValue(INumExpr)</a> and <a href="M_ILOG_CPLEX_Cplex_GetObjValue.htm">GetObjValue(Int32)</a>, 
            respectively. Most optimizers also compute additional solution information. (for example, dual values, reduced costs, 
            simplex bases, etc.)  This additional information can also be queried through various methods of <span class="code">Cplex</span>.  If you 
            attempt to retrive solution information that is not available from a particular optimizer, <span class="code">Cplex</span> will throw an 
            exception.</p><p>If you are solving an LP and a basis is available, the solution can be further analyzed by performing sensitivity 
            analysis. This information tells you how sensitive the solution is with respect to changes in variable bounds, constraint 
            bounds, or objective coefficients.  The information is computed and accessed with the methods <a href="M_ILOG_CPLEX_Cplex_GetBoundSA.htm">GetBoundSA(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, ILPMatrix)</a>,
            <a href="M_ILOG_CPLEX_Cplex_GetRangeSA.htm">GetRangeSA(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, ILPMatrix)</a>, <a href="M_ILOG_CPLEX_Cplex_GetRHSSA.htm">GetRHSSA(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, ILPMatrix)</a>, and <a href="M_ILOG_CPLEX_Cplex_GetObjSA_2.htm">GetObjSA(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>INumVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>. </p><p>An important consideration when you access solution information is the numeric quality of the solution. 
            Since <span class="code">Cplex</span> performs arithmetic operations using finite precision, solutions are always subject to numeric errors. 
            For most problems, numeric errors are well within reasonable tolerances. However, for numerically difficult models, you 
            are advised to verify the quality of the solution using the method <a href="M_ILOG_CPLEX_Cplex_GetQuality.htm">GetQuality(Cplex<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>QualityType)</a>, which offers a variety 
            of quality measures.</p></div><h1 class="heading">Inheritance Hierarchy</h1><div id="familySection" class="section" name="collapseableSection" style=""><span class="nolink">System<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Object</span><br />  <span class="nolink">IloModelImpl</span><br />    <span class="nolink">IloModelerImpl</span><br />      <span class="nolink">IloModelerAdvImpl</span><br />        <span class="selflink">ILOG.CPLEX<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Cplex</span><br /></div><h1 class="heading">See Also</h1><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><a href="AllMembers_T_ILOG_CPLEX_Cplex.htm">Cplex Members</a></div><div class="seeAlsoStyle"><a href="N_ILOG_CPLEX.htm">ILOG.CPLEX Namespace</a></div></div></div>
      <div id="footer">
        <div class="footerLine">
          <img width="100%" height="3px" src="../icons/footer.gif" alt="Footer image" title="Footer image" />
        </div>
        <A NAME="feedback"></A>
        <span id="fb" class="feedbackcss"></span>
        <p />© Copyright IBM Corp. 1987, 2015</div>
    </div>
  </body>
</html>