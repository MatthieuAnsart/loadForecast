<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:msxsl="urn:schemas-microsoft-com:xslt"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" /><META NAME="save" CONTENT="history" /><title>Cplex.Goal Class</title><link rel="stylesheet" type="text/css" href="../styles/presentation.css" /><link rel="stylesheet" type="text/css" href="ms-help://Hx/HxRuntime/HxLink.css" /><script type="text/javascript" src="../scripts/EventUtilities.js"> </script><script type="text/javascript" src="../scripts/SplitScreen.js"> </script><script type="text/javascript" src="../scripts/Dropdown.js"> </script><script type="text/javascript" src="../scripts/script_manifold.js"> </script><script type="text/javascript" src="../scripts/script_feedBack.js"> </script><script type="text/javascript" src="../scripts/CheckboxMenu.js"> </script><script type="text/javascript" src="../scripts/CommonUtilities.js"> </script><meta name="container" content="ILOG.CPLEX" /><meta name="file" content="T_ILOG_CPLEX_Cplex_Goal" /><meta name="guid" content="T_ILOG_CPLEX_Cplex_Goal" /><xml><MSHelp:Attr Name="AssetID" Value="T:ILOG.CPLEX.Cplex.Goal" /><MSHelp:TOCTitle Title="Cplex.Goal Class" /><MSHelp:RLTitle Title="Cplex.Goal Class (ILOG.CPLEX)" /><MSHelp:Keyword Index="A" Term="T:ILOG.CPLEX.Cplex.Goal" /><MSHelp:Keyword Index="A" Term="frlrfILOGCPLEXCplexGoalClassTopic" /><MSHelp:Keyword Index="K" Term="Cplex.Goal class" /><MSHelp:Keyword Index="K" Term="ILOG.CPLEX.Cplex.Goal class" /><MSHelp:Keyword Index="K" Term="Cplex.Goal class, about Cplex.Goal class" /><MSHelp:Keyword Index="F" Term="Cplex.Goal" /><MSHelp:Keyword Index="F" Term="ILOG.CPLEX.Cplex.Goal" /><MSHelp:Attr Name="HelpPriority" Value="2" /><MSHelp:Attr Name="APIType" Value="Managed" /><MSHelp:Attr Name="APILocation" Value="ILOG.CPLEX.dll" /><MSHelp:Attr Name="APIName" Value="ILOG.CPLEX.Goal" /><MSHelp:Attr Name="DevLang" Value="CSharp" /><MSHelp:Attr Name="DevLang" Value="VB" /><MSHelp:Attr Name="Locale" Value="en-us" /><MSHelp:Attr Name="TopicType" Value="kbSyntax" /><MSHelp:Attr Name="TopicType" Value="apiref" /><MSHelp:Attr Name="Abstract" Value="Base class of user-written implmentation classes of goals." /><MSHelp:Attr Name="AssemblyVersion" Value="12.6.2.0" /></xml></head><body><input type="hidden" id="userDataCache" class="userDataStyle" /><input type="hidden" id="hiddenScrollOffset" /><img id="collapseImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" title="Collapse image" /><img id="expandImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" title="Expand Image" /><img id="collapseAllImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" /><img id="expandAllImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" /><img id="dropDownImage" style="display:none; height:0; width:0;" src="../icons/dropdown.gif" /><img id="dropDownHoverImage" style="display:none; height:0; width:0;" src="../icons/dropdownHover.gif" /><img id="copyImage" style="display:none; height:0; width:0;" src="../icons/copycode.gif" title="Copy image" /><img id="copyHoverImage" style="display:none; height:0; width:0;" src="../icons/copycodeHighlight.gif" title="CopyHover image" /><div id="header"><table id="topTable" cellspacing="0" cellpadding="0"><tr><td><span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage, event)" tabindex="0"><img ID="toggleAllImage" class="toggleAll" src="../icons/collapse_all.gif" /> <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">Collapse All</label><label id="expandAllLabel" for="toggleAllImage" style="display: none;">Expand All</label> </span><span>    </span><span id="devlangsDropdown" class="filter" tabindex="0"><img id="devlangsDropdownImage" src="../icons/dropdown.gif" /> <label id="devlangsMenuAllLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: All </nobr></label><label id="devlangsMenuMultipleLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Multiple </nobr></label><label id="devlangsMenuCSharpLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: C# </nobr></label><label id="devlangsMenuVisualBasicLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Visual Basic </nobr></label></span></td></tr></table><div id="devlangsMenu"><input id="CSharpCheckbox" type="checkbox" data="CSharp,cs,'persist'" value="on" onClick="SetLanguage(this)" /><label class="checkboxLabel" for="CSharpCheckbox">C#</label><br /><input id="VisualBasicCheckbox" type="checkbox" data="VisualBasic,vb,'persist'" value="on" onClick="SetLanguage(this)" /><label class="checkboxLabel" for="VisualBasicCheckbox">Visual Basic</label><br /></div><table id="bottomTable" cellpadding="0" cellspacing="0"><tr id="headerTableRow1"><td align="left"><span id="runningHeaderText">CPLEX .NET API Reference Manual</span></td></tr><tr id="headerTableRow2"><td align="left"><span id="nsrTitle">Cplex<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>Goal Class</span></td></tr><tr id="headerTableRow3"><td align="left"><a href="T_ILOG_CPLEX_Cplex.htm">Cplex Class</a>  <a href="AllMembers_T_ILOG_CPLEX_Cplex_Goal.htm">Members</a>  <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a>  
  <span id="headfeedbackarea" class="feedbackhead">
      <a href="javascript:SubmitFeedback('','CPLEX .NET API Reference Manual','','','','%0\dYour%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report,%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed,%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.%0\A%0\d','Customer%20Feedback');">
        
        
      </a>
	</span>
</td></tr></table><table id="gradientTable"><tr><td class="nsrBottom" background="../icons/gradient.gif" /></tr></table></div><div id="mainSection"><div id="mainBody"><div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()" /><span style="color: DarkGray"> </span><div class="summary">
            Base class of user-written implmentation classes of goals.
            </div><p />
    <b>Namespace:</b> 
   <a href="N_ILOG_CPLEX.htm">ILOG.CPLEX</a><br />
    <b>Assembly:</b>
   <span sdata="assembly">ILOG.CPLEX</span> (in ILOG.CPLEX.dll)<h1 class="heading"><span onclick="ExpandCollapse(syntaxToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(syntaxToggle, event)" tabindex="0"><img id="syntaxToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Syntax</span></h1><div id="syntaxSection" class="section" name="collapseableSection" style=""><div id="syntaxCodeBlocks" class="code"><span codeLanguage="CSharp"><table><tr><th>C#</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="identifier">Goal</span></pre></td></tr></table></span><span codeLanguage="VisualBasicDeclaration"><table><tr><th>Visual Basic (Declaration)</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">MustInherit</span> <span class="keyword">Class</span> <span class="identifier">Goal</span></pre></td></tr></table></span></div></div><h1 class="heading"><span onclick="ExpandCollapse(remarksToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(remarksToggle, event)" tabindex="0"><img id="remarksToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Remarks</span></h1><div id="remarksSection" class="section" name="collapseableSection" style="">
            <p>This is an advanced class.</p>
            <p><b>Important:</b></p>
            <p>
            Advanced classes typically demand a profound understanding
            of the algorithms used by CPLEX. Thus they incur a higher risk of
            incorrect behavior in your application, behavior that can be difficult
            to debug. Therefore, the team encourages you to consider carefully whether
            you can accomplish the same task by means of other classes instead.
            </p>
            <p>Goals can be used to control the branch-and-cut search in
            <span class="code">Cplex</span>.  In some respects, goals are an alternative
            to callbacks for controlling branch-and-cut search.
            Goals are implemented in subclasses of class
            <span class="code">Cplex.Goal</span>.  Thus, this is the base class for
            user-written implementation classes of CPLEX goals.
            To implement your own goal, you need to create a subclass of
            <span class="code">Cplex.Goal</span> and implement its pure virtual method
            <span class="code">execute</span>.  After implementing your goal class, you use it
            by calling the method <span class="code">Cplex.Solve(goal)</span> instead of
            the standard <span class="code">Cplex.Solve</span> without an argument.</p>
            <p>
            The <span class="code">execute</span> method is called by <span class="code">Cplex</span>
            at each branch-and-cut node (referred to as the current node) after the
            node relaxation has been solved.
            Every node maintains a stack of goals, and the top goal from this
            stack is popped and executed until the stack becomes empty or some
            special goal is encountered as described below.  When the goal stack of
            a node becomes empty, CPLEX continues with its built-in search for that
            subtree.  When <span class="code">Cplex.Solve(goal)</span> is called,
             <span class="code">goal</span> is simply pushed on the goal stack of the root node
             before the branch-and-cut search begins.</p>
             <p>
             The method <span class="code">Cplex.Goal.Execute</span> is where you
             can control the branch-and-cut search of <span class="code">Cplex</span>.  Class
             <span class="code">Cplex.Goal</span> provides several methods for querying
             information about the current node. It is, however, the goal returned
             by the <span class="code">execute</span> method that determines how to proceed with
             the search.  CPLEX provides several methods that create
             special goals that can be used to define the ongoing search in addition
             to any user-written goal:</p>
             <ul>
             <li> <span class="code">Cplex.Or</span> creates a goal that will create child
                  nodes when executed.  One child will be created for every
                  argument passed to the method <span class="code">Cplex.Or</span>.  Each
                  child node will be initialized with a copy of the goal stack of
                  the current node.  Goals provided to the method
                  <span class="code">Cplex.Or</span> as arguments are then
                  pushed onto the goal stack of the
                  corresponding child.  Finally, the current node will be
                  deleted and a new node will be picked from the tree for evaluation.
                  </li>
             <li> Constraint goals are created with, for example, the method
                  <span class="code">Cplex.ConstraintGoal</span> with a constraint as its
                  argument as a local cut.  When executed, the constraint will be
                  added to the node problem for all nodes in that subtree.  It will
                  not, however, be added to nodes outside the subtree; use the method
                  <span class="code">Cplex.GlobalCutGoal</span> for doing this.
                  Other methods for creating
                  constraint goals more conveniently are <span class="code">Cplex.LeGoal</span>,
                  <span class="code">Cplex.GeGoal</span>, and <span class="code">Cplex.EqGoal</span>.</li>
             <li> As we just discussed, global cut goals are created with the method
                  <span class="code">Cplex.GlobalCutGoal</span>.  When executed, they add a
                  global cut to the model being solved.</li>
             <li> The method <span class="code">Cplex.And</span> takes several goals as
                  arguments.
                  When executed, it simply pushes these goals on the goal stack in
                  reverse order so that they will be executed in the order they have
                  been provided as arguments.</li>
             <li> The method <span class="code">Cplex.SolutionGoal</span> returns a goal that
                  attempts to inject a solution into the branch-and-cut search.</li>
             <li> Executing the goal returned by the method
                  <span class="code">Cplex.BranchAsCplex</span> will cause CPLEX to
                  continue with its own branching decision.  This is different from
                  continuing with an empty goal stack in that goals can still be
                  executed at every node, thus maintaining the possibility of
                  taking control at any time.</li>
             <li> When the goal created with the method <span class="code">Cplex.FailGoal</span>
                  is executed, the current node will be pruned.  That is, the search
                  will be discontinued below the current node.  If available, one of
                  the remaining nodes from the branch-and-cut tree will be chosen for
                  evaluation.</li>
             <li> When executing any other goal, the returned goal is simply pushed on
                  the goal stack, unless the returned goal is <span class="code">null</span>, which
                  will simply be ignored.</li>
             </ul>
             <p>Goals returned by <span class="code">Cplex.Or</span> and
             <span class="code">Cplex.And</span> allow you to combine goals.
             <span class="code">Cplex.And</span> allows you to execute different goals at
             one node, while <span class="code">Cplex.Or</span> allows you to execute
             different goals on different newly, created nodes.  A typical use of
             these two goals in a return statement of a user written goal is:</p>
             <p>
                <span class="code">return cplex.And ( cplex.Or (branch1, branch2), this);</span>
              </p><p>
              The <span class="code">Cplex.And</span> goal first pushes <span class="code">this</span>,
              that is, the goal currently being executed, on the goal stack and then it
              pushes the <span class="code">Cplex.Or</span> goal.  Thus the
              <span class="code">Cplex.Or</span> goal is on top of the stack and will be
              executed next.  When the <span class="code">Cplex.Or</span> is executed, it
              creates two new nodes and copies the remaining goal stack to both of
              them.  Thus both new nodes will have <span class="code">this</span>
              goal on top of the goal
              stack at this point.  Then the <span class="code">Cplex.Or</span> proceeds to
              push <span class="code">branch1</span> on the goal stack of the first child node and
              <span class="code">branch2</span> on the goal stack of the second goal child node.
              Typically, <span class="code">branch1</span> and <span class="code">branch2</span> would
              eventually contain constraint goals so by executing <span class="code">branch1</span>
              and <span class="code">branch2</span> at the respective child nodes, the child nodes
              will be restricted to represent smaller subproblems than their parent.
              After <span class="code">branch1</span> and <span class="code">branch2</span> have been executed
              <span class="code">this</span> is on top of the node stack of both child nodes, that
              is, both child nodes will continue branching according to the same rule.
              In summary, the above example creates branches described
              <span class="code">branch1</span> and <span class="code">branch2</span> and continues in both
              branches to control the same search strategy <span class="code">this</span>.</p>
              <p>
              If the default implementation of method <span class="code">clone</span> is not
              adequate and the goal is to be used for parallel optimization,
              this method also needs to be implemented by the user.  Recall that the
              default <span class="code">clone</span> method performs a shallow copy, so
              typically a user implementation would perform a deep copy for
              objects that should be local to threads or use the
              <span class="code">synchronize</span> keyword where synchronization is required.
              </p>
              <p>
              For more information about goals see that topic in the
              <em>CPLEX User's Manual</em>.</p></div><h1 class="heading"><span onclick="ExpandCollapse(familyToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(familyToggle, event)" tabindex="0"><img id="familyToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Inheritance Hierarchy</span></h1><div id="familySection" class="section" name="collapseableSection" style=""><a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">System<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>Object</a><br />  <span class="selflink">ILOG.CPLEX<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>Cplex<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>Goal</span><br /></div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle, event)" tabindex="0"><img id="seeAlsoToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />See Also</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><a href="AllMembers_T_ILOG_CPLEX_Cplex_Goal.htm">Cplex<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>Goal Members</a></div><div class="seeAlsoStyle"><a href="N_ILOG_CPLEX.htm">ILOG.CPLEX Namespace</a></div></div></div><div id="footer"><div class="footerLine"><img width="100%" height="3px" src="../icons/footer.gif" title="Footer image" /></div><A NAME="feedback"></A><span id="fb" class="feedbackcss" style="display: none;"> </span>
© Copyright IBM Corp. 1987, 2015 </div></div></body></html>